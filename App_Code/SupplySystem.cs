#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SupplySystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class SupplySystem : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArea(Area instance);
    partial void UpdateArea(Area instance);
    partial void DeleteArea(Area instance);
    partial void InsertCalendar(Calendar instance);
    partial void UpdateCalendar(Calendar instance);
    partial void DeleteCalendar(Calendar instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCycleClothe(CycleClothe instance);
    partial void UpdateCycleClothe(CycleClothe instance);
    partial void DeleteCycleClothe(CycleClothe instance);
    partial void InsertCycleFood(CycleFood instance);
    partial void UpdateCycleFood(CycleFood instance);
    partial void DeleteCycleFood(CycleFood instance);
    partial void InsertCyclePaperity(CyclePaperity instance);
    partial void UpdateCyclePaperity(CyclePaperity instance);
    partial void DeleteCyclePaperity(CyclePaperity instance);
    partial void InsertCycle(Cycle instance);
    partial void UpdateCycle(Cycle instance);
    partial void DeleteCycle(Cycle instance);
    partial void InsertIntegratedSchool(IntegratedSchool instance);
    partial void UpdateIntegratedSchool(IntegratedSchool instance);
    partial void DeleteIntegratedSchool(IntegratedSchool instance);
    partial void InsertIntegration(Integration instance);
    partial void UpdateIntegration(Integration instance);
    partial void DeleteIntegration(Integration instance);
    partial void InsertLevel(Level instance);
    partial void UpdateLevel(Level instance);
    partial void DeleteLevel(Level instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertMessageUser(MessageUser instance);
    partial void UpdateMessageUser(MessageUser instance);
    partial void DeleteMessageUser(MessageUser instance);
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    partial void InsertREP_ReceptDetail(REP_ReceptDetail instance);
    partial void UpdateREP_ReceptDetail(REP_ReceptDetail instance);
    partial void DeleteREP_ReceptDetail(REP_ReceptDetail instance);
    partial void InsertREP_Recept(REP_Recept instance);
    partial void UpdateREP_Recept(REP_Recept instance);
    partial void DeleteREP_Recept(REP_Recept instance);
    partial void InsertREP_ReceptType(REP_ReceptType instance);
    partial void UpdateREP_ReceptType(REP_ReceptType instance);
    partial void DeleteREP_ReceptType(REP_ReceptType instance);
    partial void InsertREP_Repository(REP_Repository instance);
    partial void UpdateREP_Repository(REP_Repository instance);
    partial void DeleteREP_Repository(REP_Repository instance);
    partial void InsertREP_RepositoryStuff(REP_RepositoryStuff instance);
    partial void UpdateREP_RepositoryStuff(REP_RepositoryStuff instance);
    partial void DeleteREP_RepositoryStuff(REP_RepositoryStuff instance);
    partial void InsertREP_RepositoryType(REP_RepositoryType instance);
    partial void UpdateREP_RepositoryType(REP_RepositoryType instance);
    partial void DeleteREP_RepositoryType(REP_RepositoryType instance);
    partial void InsertREP_Stuff(REP_Stuff instance);
    partial void UpdateREP_Stuff(REP_Stuff instance);
    partial void DeleteREP_Stuff(REP_Stuff instance);
    partial void InsertREP_StuffType(REP_StuffType instance);
    partial void UpdateREP_StuffType(REP_StuffType instance);
    partial void DeleteREP_StuffType(REP_StuffType instance);
    partial void InsertREP_Transportation(REP_Transportation instance);
    partial void UpdateREP_Transportation(REP_Transportation instance);
    partial void DeleteREP_Transportation(REP_Transportation instance);
    partial void InsertREP_Unit(REP_Unit instance);
    partial void UpdateREP_Unit(REP_Unit instance);
    partial void DeleteREP_Unit(REP_Unit instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSchoolClothe(SchoolClothe instance);
    partial void UpdateSchoolClothe(SchoolClothe instance);
    partial void DeleteSchoolClothe(SchoolClothe instance);
    partial void InsertSchoolEmployeesArchive(SchoolEmployeesArchive instance);
    partial void UpdateSchoolEmployeesArchive(SchoolEmployeesArchive instance);
    partial void DeleteSchoolEmployeesArchive(SchoolEmployeesArchive instance);
    partial void InsertSchoolFood(SchoolFood instance);
    partial void UpdateSchoolFood(SchoolFood instance);
    partial void DeleteSchoolFood(SchoolFood instance);
    partial void InsertSchoolKind(SchoolKind instance);
    partial void UpdateSchoolKind(SchoolKind instance);
    partial void DeleteSchoolKind(SchoolKind instance);
    partial void InsertSchoolLevel(SchoolLevel instance);
    partial void UpdateSchoolLevel(SchoolLevel instance);
    partial void DeleteSchoolLevel(SchoolLevel instance);
    partial void InsertSchoolPaperity(SchoolPaperity instance);
    partial void UpdateSchoolPaperity(SchoolPaperity instance);
    partial void DeleteSchoolPaperity(SchoolPaperity instance);
    partial void InsertSchool(School instance);
    partial void UpdateSchool(School instance);
    partial void DeleteSchool(School instance);
    partial void InsertSchoolSubLevel(SchoolSubLevel instance);
    partial void UpdateSchoolSubLevel(SchoolSubLevel instance);
    partial void DeleteSchoolSubLevel(SchoolSubLevel instance);
    partial void InsertSchoolSubLevelsArchive(SchoolSubLevelsArchive instance);
    partial void UpdateSchoolSubLevelsArchive(SchoolSubLevelsArchive instance);
    partial void DeleteSchoolSubLevelsArchive(SchoolSubLevelsArchive instance);
    partial void InsertStudentClothe(StudentClothe instance);
    partial void UpdateStudentClothe(StudentClothe instance);
    partial void DeleteStudentClothe(StudentClothe instance);
    partial void InsertSubLevel(SubLevel instance);
    partial void UpdateSubLevel(SubLevel instance);
    partial void DeleteSubLevel(SubLevel instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUsersInRole(UsersInRole instance);
    partial void UpdateUsersInRole(UsersInRole instance);
    partial void DeleteUsersInRole(UsersInRole instance);
    #endregion
		
		public SupplySystem(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SupplySystem(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SupplySystem(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SupplySystem(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Area> Areas
		{
			get
			{
				return this.GetTable<Area>();
			}
		}
		
		public System.Data.Linq.Table<Calendar> Calendars
		{
			get
			{
				return this.GetTable<Calendar>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<CycleClothe> CycleClothes
		{
			get
			{
				return this.GetTable<CycleClothe>();
			}
		}
		
		public System.Data.Linq.Table<CycleFood> CycleFoods
		{
			get
			{
				return this.GetTable<CycleFood>();
			}
		}
		
		public System.Data.Linq.Table<CyclePaperity> CyclePaperities
		{
			get
			{
				return this.GetTable<CyclePaperity>();
			}
		}
		
		public System.Data.Linq.Table<Cycle> Cycles
		{
			get
			{
				return this.GetTable<Cycle>();
			}
		}
		
		public System.Data.Linq.Table<IntegratedSchool> IntegratedSchools
		{
			get
			{
				return this.GetTable<IntegratedSchool>();
			}
		}
		
		public System.Data.Linq.Table<Integration> Integrations
		{
			get
			{
				return this.GetTable<Integration>();
			}
		}
		
		public System.Data.Linq.Table<Level> Levels
		{
			get
			{
				return this.GetTable<Level>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<MessageUser> MessageUsers
		{
			get
			{
				return this.GetTable<MessageUser>();
			}
		}
		
		public System.Data.Linq.Table<Province> Provinces
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
		
		public System.Data.Linq.Table<REP_ReceptDetail> REP_ReceptDetails
		{
			get
			{
				return this.GetTable<REP_ReceptDetail>();
			}
		}
		
		public System.Data.Linq.Table<REP_Recept> REP_Recepts
		{
			get
			{
				return this.GetTable<REP_Recept>();
			}
		}
		
		public System.Data.Linq.Table<REP_ReceptType> REP_ReceptTypes
		{
			get
			{
				return this.GetTable<REP_ReceptType>();
			}
		}
		
		public System.Data.Linq.Table<REP_Repository> REP_Repositories
		{
			get
			{
				return this.GetTable<REP_Repository>();
			}
		}
		
		public System.Data.Linq.Table<REP_RepositoryStuff> REP_RepositoryStuffs
		{
			get
			{
				return this.GetTable<REP_RepositoryStuff>();
			}
		}
		
		public System.Data.Linq.Table<REP_RepositoryType> REP_RepositoryTypes
		{
			get
			{
				return this.GetTable<REP_RepositoryType>();
			}
		}
		
		public System.Data.Linq.Table<REP_Stuff> REP_Stuffs
		{
			get
			{
				return this.GetTable<REP_Stuff>();
			}
		}
		
		public System.Data.Linq.Table<REP_StuffType> REP_StuffTypes
		{
			get
			{
				return this.GetTable<REP_StuffType>();
			}
		}
		
		public System.Data.Linq.Table<REP_Transportation> REP_Transportations
		{
			get
			{
				return this.GetTable<REP_Transportation>();
			}
		}
		
		public System.Data.Linq.Table<REP_Unit> REP_Units
		{
			get
			{
				return this.GetTable<REP_Unit>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<SchoolClothe> SchoolClothes
		{
			get
			{
				return this.GetTable<SchoolClothe>();
			}
		}
		
		public System.Data.Linq.Table<SchoolEmployeesArchive> SchoolEmployeesArchives
		{
			get
			{
				return this.GetTable<SchoolEmployeesArchive>();
			}
		}
		
		public System.Data.Linq.Table<SchoolFood> SchoolFoods
		{
			get
			{
				return this.GetTable<SchoolFood>();
			}
		}
		
		public System.Data.Linq.Table<SchoolKind> SchoolKinds
		{
			get
			{
				return this.GetTable<SchoolKind>();
			}
		}
		
		public System.Data.Linq.Table<SchoolLevel> SchoolLevels
		{
			get
			{
				return this.GetTable<SchoolLevel>();
			}
		}
		
		public System.Data.Linq.Table<SchoolPaperity> SchoolPaperities
		{
			get
			{
				return this.GetTable<SchoolPaperity>();
			}
		}
		
		public System.Data.Linq.Table<School> Schools
		{
			get
			{
				return this.GetTable<School>();
			}
		}
		
		public System.Data.Linq.Table<SchoolSubLevel> SchoolSubLevels
		{
			get
			{
				return this.GetTable<SchoolSubLevel>();
			}
		}
		
		public System.Data.Linq.Table<SchoolSubLevelsArchive> SchoolSubLevelsArchives
		{
			get
			{
				return this.GetTable<SchoolSubLevelsArchive>();
			}
		}
		
		public System.Data.Linq.Table<StudentClothe> StudentClothes
		{
			get
			{
				return this.GetTable<StudentClothe>();
			}
		}
		
		public System.Data.Linq.Table<SubLevel> SubLevels
		{
			get
			{
				return this.GetTable<SubLevel>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UsersInRole> UsersInRoles
		{
			get
			{
				return this.GetTable<UsersInRole>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Areas")]
	public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AreaCode;
		
		private System.Nullable<byte> _ProvinceID;
		
		private string _AreaName;
		
		private EntityRef<Province> _Province;
		
		private EntitySet<REP_Recept> _REP_Recepts;
		
		private EntitySet<School> _Schools;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAreaCodeChanging(int value);
    partial void OnAreaCodeChanged();
    partial void OnProvinceIDChanging(System.Nullable<byte> value);
    partial void OnProvinceIDChanged();
    partial void OnAreaNameChanging(string value);
    partial void OnAreaNameChanged();
    #endregion
		
		public Area()
		{
			this._Province = default(EntityRef<Province>);
			this._REP_Recepts = new EntitySet<REP_Recept>(new Action<REP_Recept>(this.attach_REP_Recepts), new Action<REP_Recept>(this.detach_REP_Recepts));
			this._Schools = new EntitySet<School>(new Action<School>(this.attach_Schools), new Action<School>(this.detach_Schools));
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="TinyInt")]
		public System.Nullable<byte> ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string AreaName
		{
			get
			{
				return this._AreaName;
			}
			set
			{
				if ((this._AreaName != value))
				{
					this.OnAreaNameChanging(value);
					this.SendPropertyChanging();
					this._AreaName = value;
					this.SendPropertyChanged("AreaName");
					this.OnAreaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Areas_Provinces", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Areas.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Areas.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(Nullable<byte>);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Recepts_Areas", Storage="_REP_Recepts", ThisKey="AreaCode", OtherKey="AreaCode", DeleteRule="NO ACTION")]
		public EntitySet<REP_Recept> REP_Recepts
		{
			get
			{
				return this._REP_Recepts;
			}
			set
			{
				this._REP_Recepts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Schools_Areas", Storage="_Schools", ThisKey="AreaCode", OtherKey="AreaCode", DeleteRule="NO ACTION")]
		public EntitySet<School> Schools
		{
			get
			{
				return this._Schools;
			}
			set
			{
				this._Schools.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UsersInRoles_Areas", Storage="_UsersInRoles", ThisKey="AreaCode", OtherKey="AreaCode", DeleteRule="NO ACTION")]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REP_Recepts(REP_Recept entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_REP_Recepts(REP_Recept entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
		
		private void attach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Calendar")]
	public partial class Calendar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CalendarID;
		
		private System.DateTime _GeorgianDate;
		
		private short _SolarYear;
		
		private byte _SolarMonth;
		
		private byte _SolarDay;
		
		private byte _DayOfWeek;
		
		private bool _IsHoliday;
		
		private EntitySet<SchoolFood> _SchoolFoods;
		
		private EntitySet<SchoolPaperity> _SchoolPaperities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCalendarIDChanging(int value);
    partial void OnCalendarIDChanged();
    partial void OnGeorgianDateChanging(System.DateTime value);
    partial void OnGeorgianDateChanged();
    partial void OnSolarYearChanging(short value);
    partial void OnSolarYearChanged();
    partial void OnSolarMonthChanging(byte value);
    partial void OnSolarMonthChanged();
    partial void OnSolarDayChanging(byte value);
    partial void OnSolarDayChanged();
    partial void OnDayOfWeekChanging(byte value);
    partial void OnDayOfWeekChanged();
    partial void OnIsHolidayChanging(bool value);
    partial void OnIsHolidayChanged();
    #endregion
		
		public Calendar()
		{
			this._SchoolFoods = new EntitySet<SchoolFood>(new Action<SchoolFood>(this.attach_SchoolFoods), new Action<SchoolFood>(this.detach_SchoolFoods));
			this._SchoolPaperities = new EntitySet<SchoolPaperity>(new Action<SchoolPaperity>(this.attach_SchoolPaperities), new Action<SchoolPaperity>(this.detach_SchoolPaperities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalendarID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CalendarID
		{
			get
			{
				return this._CalendarID;
			}
			set
			{
				if ((this._CalendarID != value))
				{
					this.OnCalendarIDChanging(value);
					this.SendPropertyChanging();
					this._CalendarID = value;
					this.SendPropertyChanged("CalendarID");
					this.OnCalendarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeorgianDate", DbType="Date NOT NULL")]
		public System.DateTime GeorgianDate
		{
			get
			{
				return this._GeorgianDate;
			}
			set
			{
				if ((this._GeorgianDate != value))
				{
					this.OnGeorgianDateChanging(value);
					this.SendPropertyChanging();
					this._GeorgianDate = value;
					this.SendPropertyChanged("GeorgianDate");
					this.OnGeorgianDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolarYear", DbType="SmallInt NOT NULL")]
		public short SolarYear
		{
			get
			{
				return this._SolarYear;
			}
			set
			{
				if ((this._SolarYear != value))
				{
					this.OnSolarYearChanging(value);
					this.SendPropertyChanging();
					this._SolarYear = value;
					this.SendPropertyChanged("SolarYear");
					this.OnSolarYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolarMonth", DbType="TinyInt NOT NULL")]
		public byte SolarMonth
		{
			get
			{
				return this._SolarMonth;
			}
			set
			{
				if ((this._SolarMonth != value))
				{
					this.OnSolarMonthChanging(value);
					this.SendPropertyChanging();
					this._SolarMonth = value;
					this.SendPropertyChanged("SolarMonth");
					this.OnSolarMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolarDay", DbType="TinyInt NOT NULL")]
		public byte SolarDay
		{
			get
			{
				return this._SolarDay;
			}
			set
			{
				if ((this._SolarDay != value))
				{
					this.OnSolarDayChanging(value);
					this.SendPropertyChanging();
					this._SolarDay = value;
					this.SendPropertyChanged("SolarDay");
					this.OnSolarDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfWeek", DbType="TinyInt NOT NULL")]
		public byte DayOfWeek
		{
			get
			{
				return this._DayOfWeek;
			}
			set
			{
				if ((this._DayOfWeek != value))
				{
					this.OnDayOfWeekChanging(value);
					this.SendPropertyChanging();
					this._DayOfWeek = value;
					this.SendPropertyChanged("DayOfWeek");
					this.OnDayOfWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHoliday", DbType="Bit NOT NULL")]
		public bool IsHoliday
		{
			get
			{
				return this._IsHoliday;
			}
			set
			{
				if ((this._IsHoliday != value))
				{
					this.OnIsHolidayChanging(value);
					this.SendPropertyChanging();
					this._IsHoliday = value;
					this.SendPropertyChanged("IsHoliday");
					this.OnIsHolidayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolFoods_Calendar", Storage="_SchoolFoods", ThisKey="CalendarID", OtherKey="CalendarID", DeleteRule="NO ACTION")]
		public EntitySet<SchoolFood> SchoolFoods
		{
			get
			{
				return this._SchoolFoods;
			}
			set
			{
				this._SchoolFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolPaperities_Calendar", Storage="_SchoolPaperities", ThisKey="CalendarID", OtherKey="CalendarID", DeleteRule="NO ACTION")]
		public EntitySet<SchoolPaperity> SchoolPaperities
		{
			get
			{
				return this._SchoolPaperities;
			}
			set
			{
				this._SchoolPaperities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchoolFoods(SchoolFood entity)
		{
			this.SendPropertyChanging();
			entity.Calendar = this;
		}
		
		private void detach_SchoolFoods(SchoolFood entity)
		{
			this.SendPropertyChanging();
			entity.Calendar = null;
		}
		
		private void attach_SchoolPaperities(SchoolPaperity entity)
		{
			this.SendPropertyChanging();
			entity.Calendar = this;
		}
		
		private void detach_SchoolPaperities(SchoolPaperity entity)
		{
			this.SendPropertyChanging();
			entity.Calendar = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CityID;
		
		private byte _ProvinceID;
		
		private string _Name;
		
		private EntityRef<Province> _Province;
		
		private EntitySet<School> _Schools;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(short value);
    partial void OnCityIDChanged();
    partial void OnProvinceIDChanging(byte value);
    partial void OnProvinceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public City()
		{
			this._Province = default(EntityRef<Province>);
			this._Schools = new EntitySet<School>(new Action<School>(this.attach_Schools), new Action<School>(this.detach_Schools));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="TinyInt NOT NULL")]
		public byte ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Cities_Provinces", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(byte);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Schools_Cities", Storage="_Schools", ThisKey="CityID", OtherKey="CityID", DeleteRule="NO ACTION")]
		public EntitySet<School> Schools
		{
			get
			{
				return this._Schools;
			}
			set
			{
				this._Schools.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CycleClothes")]
	public partial class CycleClothe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CycleClotheID;
		
		private int _CycleID;
		
		private int _StuffID;
		
		private bool _Available;
		
		private EntityRef<Cycle> _Cycle;
		
		private EntityRef<REP_Stuff> _REP_Stuff;
		
		private EntitySet<SchoolClothe> _SchoolClothes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCycleClotheIDChanging(short value);
    partial void OnCycleClotheIDChanged();
    partial void OnCycleIDChanging(int value);
    partial void OnCycleIDChanged();
    partial void OnStuffIDChanging(int value);
    partial void OnStuffIDChanged();
    partial void OnAvailableChanging(bool value);
    partial void OnAvailableChanged();
    #endregion
		
		public CycleClothe()
		{
			this._Cycle = default(EntityRef<Cycle>);
			this._REP_Stuff = default(EntityRef<REP_Stuff>);
			this._SchoolClothes = new EntitySet<SchoolClothe>(new Action<SchoolClothe>(this.attach_SchoolClothes), new Action<SchoolClothe>(this.detach_SchoolClothes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycleClotheID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short CycleClotheID
		{
			get
			{
				return this._CycleClotheID;
			}
			set
			{
				if ((this._CycleClotheID != value))
				{
					this.OnCycleClotheIDChanging(value);
					this.SendPropertyChanging();
					this._CycleClotheID = value;
					this.SendPropertyChanged("CycleClotheID");
					this.OnCycleClotheIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycleID", DbType="Int NOT NULL")]
		public int CycleID
		{
			get
			{
				return this._CycleID;
			}
			set
			{
				if ((this._CycleID != value))
				{
					if (this._Cycle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCycleIDChanging(value);
					this.SendPropertyChanging();
					this._CycleID = value;
					this.SendPropertyChanged("CycleID");
					this.OnCycleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StuffID", DbType="Int NOT NULL")]
		public int StuffID
		{
			get
			{
				return this._StuffID;
			}
			set
			{
				if ((this._StuffID != value))
				{
					if (this._REP_Stuff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStuffIDChanging(value);
					this.SendPropertyChanging();
					this._StuffID = value;
					this.SendPropertyChanged("StuffID");
					this.OnStuffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="Bit NOT NULL")]
		public bool Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CycleClothes_Cycles", Storage="_Cycle", ThisKey="CycleID", OtherKey="CycleID", IsForeignKey=true)]
		public Cycle Cycle
		{
			get
			{
				return this._Cycle.Entity;
			}
			set
			{
				Cycle previousValue = this._Cycle.Entity;
				if (((previousValue != value) 
							|| (this._Cycle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cycle.Entity = null;
						previousValue.CycleClothes.Remove(this);
					}
					this._Cycle.Entity = value;
					if ((value != null))
					{
						value.CycleClothes.Add(this);
						this._CycleID = value.CycleID;
					}
					else
					{
						this._CycleID = default(int);
					}
					this.SendPropertyChanged("Cycle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CycleClothes_REP_Stuffs", Storage="_REP_Stuff", ThisKey="StuffID", OtherKey="StuffID", IsForeignKey=true)]
		public REP_Stuff REP_Stuff
		{
			get
			{
				return this._REP_Stuff.Entity;
			}
			set
			{
				REP_Stuff previousValue = this._REP_Stuff.Entity;
				if (((previousValue != value) 
							|| (this._REP_Stuff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REP_Stuff.Entity = null;
						previousValue.CycleClothes.Remove(this);
					}
					this._REP_Stuff.Entity = value;
					if ((value != null))
					{
						value.CycleClothes.Add(this);
						this._StuffID = value.StuffID;
					}
					else
					{
						this._StuffID = default(int);
					}
					this.SendPropertyChanged("REP_Stuff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolClothes_CycleClothes", Storage="_SchoolClothes", ThisKey="CycleClotheID", OtherKey="CycleClotheID", DeleteRule="NO ACTION")]
		public EntitySet<SchoolClothe> SchoolClothes
		{
			get
			{
				return this._SchoolClothes;
			}
			set
			{
				this._SchoolClothes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchoolClothes(SchoolClothe entity)
		{
			this.SendPropertyChanging();
			entity.CycleClothe = this;
		}
		
		private void detach_SchoolClothes(SchoolClothe entity)
		{
			this.SendPropertyChanging();
			entity.CycleClothe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CycleFoods")]
	public partial class CycleFood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CycleFoodID;
		
		private int _CycleID;
		
		private int _StuffID;
		
		private bool _Available;
		
		private bool _IsDaily;
		
		private EntityRef<Cycle> _Cycle;
		
		private EntityRef<REP_Stuff> _REP_Stuff;
		
		private EntitySet<SchoolFood> _SchoolFoods;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCycleFoodIDChanging(short value);
    partial void OnCycleFoodIDChanged();
    partial void OnCycleIDChanging(int value);
    partial void OnCycleIDChanged();
    partial void OnStuffIDChanging(int value);
    partial void OnStuffIDChanged();
    partial void OnAvailableChanging(bool value);
    partial void OnAvailableChanged();
    partial void OnIsDailyChanging(bool value);
    partial void OnIsDailyChanged();
    #endregion
		
		public CycleFood()
		{
			this._Cycle = default(EntityRef<Cycle>);
			this._REP_Stuff = default(EntityRef<REP_Stuff>);
			this._SchoolFoods = new EntitySet<SchoolFood>(new Action<SchoolFood>(this.attach_SchoolFoods), new Action<SchoolFood>(this.detach_SchoolFoods));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycleFoodID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short CycleFoodID
		{
			get
			{
				return this._CycleFoodID;
			}
			set
			{
				if ((this._CycleFoodID != value))
				{
					this.OnCycleFoodIDChanging(value);
					this.SendPropertyChanging();
					this._CycleFoodID = value;
					this.SendPropertyChanged("CycleFoodID");
					this.OnCycleFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycleID", DbType="Int NOT NULL")]
		public int CycleID
		{
			get
			{
				return this._CycleID;
			}
			set
			{
				if ((this._CycleID != value))
				{
					if (this._Cycle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCycleIDChanging(value);
					this.SendPropertyChanging();
					this._CycleID = value;
					this.SendPropertyChanged("CycleID");
					this.OnCycleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StuffID", DbType="Int NOT NULL")]
		public int StuffID
		{
			get
			{
				return this._StuffID;
			}
			set
			{
				if ((this._StuffID != value))
				{
					if (this._REP_Stuff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStuffIDChanging(value);
					this.SendPropertyChanging();
					this._StuffID = value;
					this.SendPropertyChanged("StuffID");
					this.OnStuffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="Bit NOT NULL")]
		public bool Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDaily", DbType="Bit NOT NULL")]
		public bool IsDaily
		{
			get
			{
				return this._IsDaily;
			}
			set
			{
				if ((this._IsDaily != value))
				{
					this.OnIsDailyChanging(value);
					this.SendPropertyChanging();
					this._IsDaily = value;
					this.SendPropertyChanged("IsDaily");
					this.OnIsDailyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CycleDailyFoods_Cycles", Storage="_Cycle", ThisKey="CycleID", OtherKey="CycleID", IsForeignKey=true)]
		public Cycle Cycle
		{
			get
			{
				return this._Cycle.Entity;
			}
			set
			{
				Cycle previousValue = this._Cycle.Entity;
				if (((previousValue != value) 
							|| (this._Cycle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cycle.Entity = null;
						previousValue.CycleFoods.Remove(this);
					}
					this._Cycle.Entity = value;
					if ((value != null))
					{
						value.CycleFoods.Add(this);
						this._CycleID = value.CycleID;
					}
					else
					{
						this._CycleID = default(int);
					}
					this.SendPropertyChanged("Cycle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CycleFoods_REP_Stuffs", Storage="_REP_Stuff", ThisKey="StuffID", OtherKey="StuffID", IsForeignKey=true)]
		public REP_Stuff REP_Stuff
		{
			get
			{
				return this._REP_Stuff.Entity;
			}
			set
			{
				REP_Stuff previousValue = this._REP_Stuff.Entity;
				if (((previousValue != value) 
							|| (this._REP_Stuff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REP_Stuff.Entity = null;
						previousValue.CycleFoods.Remove(this);
					}
					this._REP_Stuff.Entity = value;
					if ((value != null))
					{
						value.CycleFoods.Add(this);
						this._StuffID = value.StuffID;
					}
					else
					{
						this._StuffID = default(int);
					}
					this.SendPropertyChanged("REP_Stuff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolFoods_CycleFoods", Storage="_SchoolFoods", ThisKey="CycleFoodID", OtherKey="CycleFoodID", DeleteRule="NO ACTION")]
		public EntitySet<SchoolFood> SchoolFoods
		{
			get
			{
				return this._SchoolFoods;
			}
			set
			{
				this._SchoolFoods.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchoolFoods(SchoolFood entity)
		{
			this.SendPropertyChanging();
			entity.CycleFood = this;
		}
		
		private void detach_SchoolFoods(SchoolFood entity)
		{
			this.SendPropertyChanging();
			entity.CycleFood = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CyclePaperities")]
	public partial class CyclePaperity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CyclePaperityID;
		
		private int _CycleID;
		
		private int _StuffID;
		
		private bool _Available;
		
		private EntityRef<Cycle> _Cycle;
		
		private EntityRef<REP_Stuff> _REP_Stuff;
		
		private EntitySet<SchoolPaperity> _SchoolPaperities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCyclePaperityIDChanging(short value);
    partial void OnCyclePaperityIDChanged();
    partial void OnCycleIDChanging(int value);
    partial void OnCycleIDChanged();
    partial void OnStuffIDChanging(int value);
    partial void OnStuffIDChanged();
    partial void OnAvailableChanging(bool value);
    partial void OnAvailableChanged();
    #endregion
		
		public CyclePaperity()
		{
			this._Cycle = default(EntityRef<Cycle>);
			this._REP_Stuff = default(EntityRef<REP_Stuff>);
			this._SchoolPaperities = new EntitySet<SchoolPaperity>(new Action<SchoolPaperity>(this.attach_SchoolPaperities), new Action<SchoolPaperity>(this.detach_SchoolPaperities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CyclePaperityID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short CyclePaperityID
		{
			get
			{
				return this._CyclePaperityID;
			}
			set
			{
				if ((this._CyclePaperityID != value))
				{
					this.OnCyclePaperityIDChanging(value);
					this.SendPropertyChanging();
					this._CyclePaperityID = value;
					this.SendPropertyChanged("CyclePaperityID");
					this.OnCyclePaperityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycleID", DbType="Int NOT NULL")]
		public int CycleID
		{
			get
			{
				return this._CycleID;
			}
			set
			{
				if ((this._CycleID != value))
				{
					if (this._Cycle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCycleIDChanging(value);
					this.SendPropertyChanging();
					this._CycleID = value;
					this.SendPropertyChanged("CycleID");
					this.OnCycleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StuffID", DbType="Int NOT NULL")]
		public int StuffID
		{
			get
			{
				return this._StuffID;
			}
			set
			{
				if ((this._StuffID != value))
				{
					if (this._REP_Stuff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStuffIDChanging(value);
					this.SendPropertyChanging();
					this._StuffID = value;
					this.SendPropertyChanged("StuffID");
					this.OnStuffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="Bit NOT NULL")]
		public bool Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CyclePaperities_Cycles", Storage="_Cycle", ThisKey="CycleID", OtherKey="CycleID", IsForeignKey=true)]
		public Cycle Cycle
		{
			get
			{
				return this._Cycle.Entity;
			}
			set
			{
				Cycle previousValue = this._Cycle.Entity;
				if (((previousValue != value) 
							|| (this._Cycle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cycle.Entity = null;
						previousValue.CyclePaperities.Remove(this);
					}
					this._Cycle.Entity = value;
					if ((value != null))
					{
						value.CyclePaperities.Add(this);
						this._CycleID = value.CycleID;
					}
					else
					{
						this._CycleID = default(int);
					}
					this.SendPropertyChanged("Cycle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CyclePaperities_REP_Stuffs", Storage="_REP_Stuff", ThisKey="StuffID", OtherKey="StuffID", IsForeignKey=true)]
		public REP_Stuff REP_Stuff
		{
			get
			{
				return this._REP_Stuff.Entity;
			}
			set
			{
				REP_Stuff previousValue = this._REP_Stuff.Entity;
				if (((previousValue != value) 
							|| (this._REP_Stuff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REP_Stuff.Entity = null;
						previousValue.CyclePaperities.Remove(this);
					}
					this._REP_Stuff.Entity = value;
					if ((value != null))
					{
						value.CyclePaperities.Add(this);
						this._StuffID = value.StuffID;
					}
					else
					{
						this._StuffID = default(int);
					}
					this.SendPropertyChanged("REP_Stuff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolPaperities_CyclePaperities", Storage="_SchoolPaperities", ThisKey="CyclePaperityID", OtherKey="CyclePaperityID", DeleteRule="NO ACTION")]
		public EntitySet<SchoolPaperity> SchoolPaperities
		{
			get
			{
				return this._SchoolPaperities;
			}
			set
			{
				this._SchoolPaperities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchoolPaperities(SchoolPaperity entity)
		{
			this.SendPropertyChanging();
			entity.CyclePaperity = this;
		}
		
		private void detach_SchoolPaperities(SchoolPaperity entity)
		{
			this.SendPropertyChanging();
			entity.CyclePaperity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cycles")]
	public partial class Cycle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CycleID;
		
		private string _CycleName;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private System.DateTime _SubmitDate;
		
		private bool _IsActive;
		
		private EntitySet<CycleClothe> _CycleClothes;
		
		private EntitySet<CycleFood> _CycleFoods;
		
		private EntitySet<CyclePaperity> _CyclePaperities;
		
		private EntitySet<Integration> _Integrations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCycleIDChanging(int value);
    partial void OnCycleIDChanged();
    partial void OnCycleNameChanging(string value);
    partial void OnCycleNameChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Cycle()
		{
			this._CycleClothes = new EntitySet<CycleClothe>(new Action<CycleClothe>(this.attach_CycleClothes), new Action<CycleClothe>(this.detach_CycleClothes));
			this._CycleFoods = new EntitySet<CycleFood>(new Action<CycleFood>(this.attach_CycleFoods), new Action<CycleFood>(this.detach_CycleFoods));
			this._CyclePaperities = new EntitySet<CyclePaperity>(new Action<CyclePaperity>(this.attach_CyclePaperities), new Action<CyclePaperity>(this.detach_CyclePaperities));
			this._Integrations = new EntitySet<Integration>(new Action<Integration>(this.attach_Integrations), new Action<Integration>(this.detach_Integrations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CycleID
		{
			get
			{
				return this._CycleID;
			}
			set
			{
				if ((this._CycleID != value))
				{
					this.OnCycleIDChanging(value);
					this.SendPropertyChanging();
					this._CycleID = value;
					this.SendPropertyChanged("CycleID");
					this.OnCycleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CycleName
		{
			get
			{
				return this._CycleName;
			}
			set
			{
				if ((this._CycleName != value))
				{
					this.OnCycleNameChanging(value);
					this.SendPropertyChanging();
					this._CycleName = value;
					this.SendPropertyChanged("CycleName");
					this.OnCycleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CycleClothes_Cycles", Storage="_CycleClothes", ThisKey="CycleID", OtherKey="CycleID", DeleteRule="NO ACTION")]
		public EntitySet<CycleClothe> CycleClothes
		{
			get
			{
				return this._CycleClothes;
			}
			set
			{
				this._CycleClothes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CycleDailyFoods_Cycles", Storage="_CycleFoods", ThisKey="CycleID", OtherKey="CycleID", DeleteRule="NO ACTION")]
		public EntitySet<CycleFood> CycleFoods
		{
			get
			{
				return this._CycleFoods;
			}
			set
			{
				this._CycleFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CyclePaperities_Cycles", Storage="_CyclePaperities", ThisKey="CycleID", OtherKey="CycleID", DeleteRule="NO ACTION")]
		public EntitySet<CyclePaperity> CyclePaperities
		{
			get
			{
				return this._CyclePaperities;
			}
			set
			{
				this._CyclePaperities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Integrations_Cycles", Storage="_Integrations", ThisKey="CycleID", OtherKey="CycleID", DeleteRule="NO ACTION")]
		public EntitySet<Integration> Integrations
		{
			get
			{
				return this._Integrations;
			}
			set
			{
				this._Integrations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CycleClothes(CycleClothe entity)
		{
			this.SendPropertyChanging();
			entity.Cycle = this;
		}
		
		private void detach_CycleClothes(CycleClothe entity)
		{
			this.SendPropertyChanging();
			entity.Cycle = null;
		}
		
		private void attach_CycleFoods(CycleFood entity)
		{
			this.SendPropertyChanging();
			entity.Cycle = this;
		}
		
		private void detach_CycleFoods(CycleFood entity)
		{
			this.SendPropertyChanging();
			entity.Cycle = null;
		}
		
		private void attach_CyclePaperities(CyclePaperity entity)
		{
			this.SendPropertyChanging();
			entity.Cycle = this;
		}
		
		private void detach_CyclePaperities(CyclePaperity entity)
		{
			this.SendPropertyChanging();
			entity.Cycle = null;
		}
		
		private void attach_Integrations(Integration entity)
		{
			this.SendPropertyChanging();
			entity.Cycle = this;
		}
		
		private void detach_Integrations(Integration entity)
		{
			this.SendPropertyChanging();
			entity.Cycle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IntegratedSchools")]
	public partial class IntegratedSchool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IntegrationID;
		
		private int _SchoolID;
		
		private EntityRef<Integration> _Integration;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIntegrationIDChanging(int value);
    partial void OnIntegrationIDChanged();
    partial void OnSchoolIDChanging(int value);
    partial void OnSchoolIDChanged();
    #endregion
		
		public IntegratedSchool()
		{
			this._Integration = default(EntityRef<Integration>);
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntegrationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IntegrationID
		{
			get
			{
				return this._IntegrationID;
			}
			set
			{
				if ((this._IntegrationID != value))
				{
					if (this._Integration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIntegrationIDChanging(value);
					this.SendPropertyChanging();
					this._IntegrationID = value;
					this.SendPropertyChanged("IntegrationID");
					this.OnIntegrationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SchoolID
		{
			get
			{
				return this._SchoolID;
			}
			set
			{
				if ((this._SchoolID != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolID = value;
					this.SendPropertyChanged("SchoolID");
					this.OnSchoolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_IntegratedSchools_Itegrations", Storage="_Integration", ThisKey="IntegrationID", OtherKey="IntegrationID", IsForeignKey=true)]
		public Integration Integration
		{
			get
			{
				return this._Integration.Entity;
			}
			set
			{
				Integration previousValue = this._Integration.Entity;
				if (((previousValue != value) 
							|| (this._Integration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Integration.Entity = null;
						previousValue.IntegratedSchools.Remove(this);
					}
					this._Integration.Entity = value;
					if ((value != null))
					{
						value.IntegratedSchools.Add(this);
						this._IntegrationID = value.IntegrationID;
					}
					else
					{
						this._IntegrationID = default(int);
					}
					this.SendPropertyChanged("Integration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_IntegratedSchools_Schools", Storage="_School", ThisKey="SchoolID", OtherKey="SchoolID", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.IntegratedSchools.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.IntegratedSchools.Add(this);
						this._SchoolID = value.SchoolID;
					}
					else
					{
						this._SchoolID = default(int);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Integrations")]
	public partial class Integration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IntegrationID;
		
		private int _SchoolID;
		
		private int _CycleID;
		
		private System.DateTime _SubmitDate;
		
		private byte _IntegrationMode;
		
		private string _Comment;
		
		private EntitySet<IntegratedSchool> _IntegratedSchools;
		
		private EntityRef<Cycle> _Cycle;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIntegrationIDChanging(int value);
    partial void OnIntegrationIDChanged();
    partial void OnSchoolIDChanging(int value);
    partial void OnSchoolIDChanged();
    partial void OnCycleIDChanging(int value);
    partial void OnCycleIDChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnIntegrationModeChanging(byte value);
    partial void OnIntegrationModeChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public Integration()
		{
			this._IntegratedSchools = new EntitySet<IntegratedSchool>(new Action<IntegratedSchool>(this.attach_IntegratedSchools), new Action<IntegratedSchool>(this.detach_IntegratedSchools));
			this._Cycle = default(EntityRef<Cycle>);
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntegrationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IntegrationID
		{
			get
			{
				return this._IntegrationID;
			}
			set
			{
				if ((this._IntegrationID != value))
				{
					this.OnIntegrationIDChanging(value);
					this.SendPropertyChanging();
					this._IntegrationID = value;
					this.SendPropertyChanged("IntegrationID");
					this.OnIntegrationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolID", DbType="Int NOT NULL")]
		public int SchoolID
		{
			get
			{
				return this._SchoolID;
			}
			set
			{
				if ((this._SchoolID != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolID = value;
					this.SendPropertyChanged("SchoolID");
					this.OnSchoolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycleID", DbType="Int NOT NULL")]
		public int CycleID
		{
			get
			{
				return this._CycleID;
			}
			set
			{
				if ((this._CycleID != value))
				{
					if (this._Cycle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCycleIDChanging(value);
					this.SendPropertyChanging();
					this._CycleID = value;
					this.SendPropertyChanged("CycleID");
					this.OnCycleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntegrationMode", DbType="TinyInt NOT NULL")]
		public byte IntegrationMode
		{
			get
			{
				return this._IntegrationMode;
			}
			set
			{
				if ((this._IntegrationMode != value))
				{
					this.OnIntegrationModeChanging(value);
					this.SendPropertyChanging();
					this._IntegrationMode = value;
					this.SendPropertyChanged("IntegrationMode");
					this.OnIntegrationModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_IntegratedSchools_Itegrations", Storage="_IntegratedSchools", ThisKey="IntegrationID", OtherKey="IntegrationID", DeleteRule="NO ACTION")]
		public EntitySet<IntegratedSchool> IntegratedSchools
		{
			get
			{
				return this._IntegratedSchools;
			}
			set
			{
				this._IntegratedSchools.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Integrations_Cycles", Storage="_Cycle", ThisKey="CycleID", OtherKey="CycleID", IsForeignKey=true)]
		public Cycle Cycle
		{
			get
			{
				return this._Cycle.Entity;
			}
			set
			{
				Cycle previousValue = this._Cycle.Entity;
				if (((previousValue != value) 
							|| (this._Cycle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cycle.Entity = null;
						previousValue.Integrations.Remove(this);
					}
					this._Cycle.Entity = value;
					if ((value != null))
					{
						value.Integrations.Add(this);
						this._CycleID = value.CycleID;
					}
					else
					{
						this._CycleID = default(int);
					}
					this.SendPropertyChanged("Cycle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Integrations_Schools", Storage="_School", ThisKey="SchoolID", OtherKey="SchoolID", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.Integrations.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.Integrations.Add(this);
						this._SchoolID = value.SchoolID;
					}
					else
					{
						this._SchoolID = default(int);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IntegratedSchools(IntegratedSchool entity)
		{
			this.SendPropertyChanging();
			entity.Integration = this;
		}
		
		private void detach_IntegratedSchools(IntegratedSchool entity)
		{
			this.SendPropertyChanging();
			entity.Integration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Levels")]
	public partial class Level : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _LevelID;
		
		private string _LevelName;
		
		private EntitySet<SchoolLevel> _SchoolLevels;
		
		private EntitySet<SubLevel> _SubLevels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelIDChanging(short value);
    partial void OnLevelIDChanged();
    partial void OnLevelNameChanging(string value);
    partial void OnLevelNameChanged();
    #endregion
		
		public Level()
		{
			this._SchoolLevels = new EntitySet<SchoolLevel>(new Action<SchoolLevel>(this.attach_SchoolLevels), new Action<SchoolLevel>(this.detach_SchoolLevels));
			this._SubLevels = new EntitySet<SubLevel>(new Action<SubLevel>(this.attach_SubLevels), new Action<SubLevel>(this.detach_SubLevels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string LevelName
		{
			get
			{
				return this._LevelName;
			}
			set
			{
				if ((this._LevelName != value))
				{
					this.OnLevelNameChanging(value);
					this.SendPropertyChanging();
					this._LevelName = value;
					this.SendPropertyChanged("LevelName");
					this.OnLevelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolLevels_Levels", Storage="_SchoolLevels", ThisKey="LevelID", OtherKey="LevelID", DeleteRule="NO ACTION")]
		public EntitySet<SchoolLevel> SchoolLevels
		{
			get
			{
				return this._SchoolLevels;
			}
			set
			{
				this._SchoolLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SubLevels_Levels", Storage="_SubLevels", ThisKey="LevelID", OtherKey="LevelID", DeleteRule="NO ACTION")]
		public EntitySet<SubLevel> SubLevels
		{
			get
			{
				return this._SubLevels;
			}
			set
			{
				this._SubLevels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchoolLevels(SchoolLevel entity)
		{
			this.SendPropertyChanging();
			entity.Level = this;
		}
		
		private void detach_SchoolLevels(SchoolLevel entity)
		{
			this.SendPropertyChanging();
			entity.Level = null;
		}
		
		private void attach_SubLevels(SubLevel entity)
		{
			this.SendPropertyChanging();
			entity.Level = this;
		}
		
		private void detach_SubLevels(SubLevel entity)
		{
			this.SendPropertyChanging();
			entity.Level = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageID;
		
		private string _Subject;
		
		private string _Body;
		
		private int _UserInRoleID;
		
		private System.Data.Linq.Binary _Attachment;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<UsersInRole> _UsersInRole;
		
		private EntitySet<MessageUser> _MessageUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(int value);
    partial void OnMessageIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnUserInRoleIDChanging(int value);
    partial void OnUserInRoleIDChanged();
    partial void OnAttachmentChanging(System.Data.Linq.Binary value);
    partial void OnAttachmentChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public Message()
		{
			this._UsersInRole = default(EntityRef<UsersInRole>);
			this._MessageUsers = new EntitySet<MessageUser>(new Action<MessageUser>(this.attach_MessageUsers), new Action<MessageUser>(this.detach_MessageUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInRoleID", DbType="Int NOT NULL")]
		public int UserInRoleID
		{
			get
			{
				return this._UserInRoleID;
			}
			set
			{
				if ((this._UserInRoleID != value))
				{
					if (this._UsersInRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserInRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserInRoleID = value;
					this.SendPropertyChanged("UserInRoleID");
					this.OnUserInRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attachment", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Attachment
		{
			get
			{
				return this._Attachment;
			}
			set
			{
				if ((this._Attachment != value))
				{
					this.OnAttachmentChanging(value);
					this.SendPropertyChanging();
					this._Attachment = value;
					this.SendPropertyChanged("Attachment");
					this.OnAttachmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="DateTime NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Messages_UsersInRoles", Storage="_UsersInRole", ThisKey="UserInRoleID", OtherKey="UserInRoleID", IsForeignKey=true)]
		public UsersInRole UsersInRole
		{
			get
			{
				return this._UsersInRole.Entity;
			}
			set
			{
				UsersInRole previousValue = this._UsersInRole.Entity;
				if (((previousValue != value) 
							|| (this._UsersInRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersInRole.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._UsersInRole.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._UserInRoleID = value.UserInRoleID;
					}
					else
					{
						this._UserInRoleID = default(int);
					}
					this.SendPropertyChanged("UsersInRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_MessageUsers_Messages", Storage="_MessageUsers", ThisKey="MessageID", OtherKey="MessageID", DeleteRule="NO ACTION")]
		public EntitySet<MessageUser> MessageUsers
		{
			get
			{
				return this._MessageUsers;
			}
			set
			{
				this._MessageUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageUsers(MessageUser entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}
		
		private void detach_MessageUsers(MessageUser entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageUsers")]
	public partial class MessageUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageID;
		
		private int _UserInRoleID;
		
		private bool _Read;
		
		private bool _Deleted;
		
		private EntityRef<Message> _Message;
		
		private EntityRef<UsersInRole> _UsersInRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(int value);
    partial void OnMessageIDChanged();
    partial void OnUserInRoleIDChanging(int value);
    partial void OnUserInRoleIDChanged();
    partial void OnReadChanging(bool value);
    partial void OnReadChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public MessageUser()
		{
			this._Message = default(EntityRef<Message>);
			this._UsersInRole = default(EntityRef<UsersInRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInRoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserInRoleID
		{
			get
			{
				return this._UserInRoleID;
			}
			set
			{
				if ((this._UserInRoleID != value))
				{
					if (this._UsersInRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserInRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserInRoleID = value;
					this.SendPropertyChanged("UserInRoleID");
					this.OnUserInRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Read", DbType="Bit NOT NULL")]
		public bool Read
		{
			get
			{
				return this._Read;
			}
			set
			{
				if ((this._Read != value))
				{
					this.OnReadChanging(value);
					this.SendPropertyChanging();
					this._Read = value;
					this.SendPropertyChanged("Read");
					this.OnReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_MessageUsers_Messages", Storage="_Message", ThisKey="MessageID", OtherKey="MessageID", IsForeignKey=true)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.MessageUsers.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.MessageUsers.Add(this);
						this._MessageID = value.MessageID;
					}
					else
					{
						this._MessageID = default(int);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_MessageUsers_UsersInRoles", Storage="_UsersInRole", ThisKey="UserInRoleID", OtherKey="UserInRoleID", IsForeignKey=true)]
		public UsersInRole UsersInRole
		{
			get
			{
				return this._UsersInRole.Entity;
			}
			set
			{
				UsersInRole previousValue = this._UsersInRole.Entity;
				if (((previousValue != value) 
							|| (this._UsersInRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersInRole.Entity = null;
						previousValue.MessageUsers.Remove(this);
					}
					this._UsersInRole.Entity = value;
					if ((value != null))
					{
						value.MessageUsers.Add(this);
						this._UserInRoleID = value.UserInRoleID;
					}
					else
					{
						this._UserInRoleID = default(int);
					}
					this.SendPropertyChanged("UsersInRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Provinces")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ProvinceID;
		
		private string _Name;
		
		private EntitySet<Area> _Areas;
		
		private EntitySet<City> _Cities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvinceIDChanging(byte value);
    partial void OnProvinceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Province()
		{
			this._Areas = new EntitySet<Area>(new Action<Area>(this.attach_Areas), new Action<Area>(this.detach_Areas));
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Areas_Provinces", Storage="_Areas", ThisKey="ProvinceID", OtherKey="ProvinceID", DeleteRule="NO ACTION")]
		public EntitySet<Area> Areas
		{
			get
			{
				return this._Areas;
			}
			set
			{
				this._Areas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Cities_Provinces", Storage="_Cities", ThisKey="ProvinceID", OtherKey="ProvinceID", DeleteRule="NO ACTION")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REP_ReceptDetails")]
	public partial class REP_ReceptDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReceptDetailID;
		
		private int _ReceptID;
		
		private int _StuffID;
		
		private int _FirstBalance;
		
		private System.Nullable<short> _SecondBalance;
		
		private System.Nullable<short> _ThirdBalance;
		
		private System.Nullable<decimal> _BasePrice;
		
		private EntityRef<REP_Recept> _REP_Recept;
		
		private EntityRef<REP_Stuff> _REP_Stuff;
		
		private EntityRef<REP_Transportation> _REP_Transportation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceptDetailIDChanging(int value);
    partial void OnReceptDetailIDChanged();
    partial void OnReceptIDChanging(int value);
    partial void OnReceptIDChanged();
    partial void OnStuffIDChanging(int value);
    partial void OnStuffIDChanged();
    partial void OnFirstBalanceChanging(int value);
    partial void OnFirstBalanceChanged();
    partial void OnSecondBalanceChanging(System.Nullable<short> value);
    partial void OnSecondBalanceChanged();
    partial void OnThirdBalanceChanging(System.Nullable<short> value);
    partial void OnThirdBalanceChanged();
    partial void OnBasePriceChanging(System.Nullable<decimal> value);
    partial void OnBasePriceChanged();
    #endregion
		
		public REP_ReceptDetail()
		{
			this._REP_Recept = default(EntityRef<REP_Recept>);
			this._REP_Stuff = default(EntityRef<REP_Stuff>);
			this._REP_Transportation = default(EntityRef<REP_Transportation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReceptDetailID
		{
			get
			{
				return this._ReceptDetailID;
			}
			set
			{
				if ((this._ReceptDetailID != value))
				{
					if (this._REP_Transportation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceptDetailIDChanging(value);
					this.SendPropertyChanging();
					this._ReceptDetailID = value;
					this.SendPropertyChanged("ReceptDetailID");
					this.OnReceptDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReceptID
		{
			get
			{
				return this._ReceptID;
			}
			set
			{
				if ((this._ReceptID != value))
				{
					if (this._REP_Recept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceptID = value;
					this.SendPropertyChanged("ReceptID");
					this.OnReceptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StuffID", DbType="Int NOT NULL")]
		public int StuffID
		{
			get
			{
				return this._StuffID;
			}
			set
			{
				if ((this._StuffID != value))
				{
					if (this._REP_Stuff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStuffIDChanging(value);
					this.SendPropertyChanging();
					this._StuffID = value;
					this.SendPropertyChanged("StuffID");
					this.OnStuffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstBalance", DbType="Int NOT NULL")]
		public int FirstBalance
		{
			get
			{
				return this._FirstBalance;
			}
			set
			{
				if ((this._FirstBalance != value))
				{
					this.OnFirstBalanceChanging(value);
					this.SendPropertyChanging();
					this._FirstBalance = value;
					this.SendPropertyChanged("FirstBalance");
					this.OnFirstBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondBalance", DbType="SmallInt")]
		public System.Nullable<short> SecondBalance
		{
			get
			{
				return this._SecondBalance;
			}
			set
			{
				if ((this._SecondBalance != value))
				{
					this.OnSecondBalanceChanging(value);
					this.SendPropertyChanging();
					this._SecondBalance = value;
					this.SendPropertyChanged("SecondBalance");
					this.OnSecondBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdBalance", DbType="SmallInt")]
		public System.Nullable<short> ThirdBalance
		{
			get
			{
				return this._ThirdBalance;
			}
			set
			{
				if ((this._ThirdBalance != value))
				{
					this.OnThirdBalanceChanging(value);
					this.SendPropertyChanging();
					this._ThirdBalance = value;
					this.SendPropertyChanged("ThirdBalance");
					this.OnThirdBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasePrice", DbType="Money")]
		public System.Nullable<decimal> BasePrice
		{
			get
			{
				return this._BasePrice;
			}
			set
			{
				if ((this._BasePrice != value))
				{
					this.OnBasePriceChanging(value);
					this.SendPropertyChanging();
					this._BasePrice = value;
					this.SendPropertyChanged("BasePrice");
					this.OnBasePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ReceptDetails_Recepts", Storage="_REP_Recept", ThisKey="ReceptID", OtherKey="ReceptID", IsForeignKey=true)]
		public REP_Recept REP_Recept
		{
			get
			{
				return this._REP_Recept.Entity;
			}
			set
			{
				REP_Recept previousValue = this._REP_Recept.Entity;
				if (((previousValue != value) 
							|| (this._REP_Recept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REP_Recept.Entity = null;
						previousValue.REP_ReceptDetails.Remove(this);
					}
					this._REP_Recept.Entity = value;
					if ((value != null))
					{
						value.REP_ReceptDetails.Add(this);
						this._ReceptID = value.ReceptID;
					}
					else
					{
						this._ReceptID = default(int);
					}
					this.SendPropertyChanged("REP_Recept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_ReceptDetails_REP_Stuffs", Storage="_REP_Stuff", ThisKey="StuffID", OtherKey="StuffID", IsForeignKey=true)]
		public REP_Stuff REP_Stuff
		{
			get
			{
				return this._REP_Stuff.Entity;
			}
			set
			{
				REP_Stuff previousValue = this._REP_Stuff.Entity;
				if (((previousValue != value) 
							|| (this._REP_Stuff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REP_Stuff.Entity = null;
						previousValue.REP_ReceptDetails.Remove(this);
					}
					this._REP_Stuff.Entity = value;
					if ((value != null))
					{
						value.REP_ReceptDetails.Add(this);
						this._StuffID = value.StuffID;
					}
					else
					{
						this._StuffID = default(int);
					}
					this.SendPropertyChanged("REP_Stuff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_ReceptDetails_REP_Transportations", Storage="_REP_Transportation", ThisKey="ReceptDetailID", OtherKey="TransportID", IsForeignKey=true)]
		public REP_Transportation REP_Transportation
		{
			get
			{
				return this._REP_Transportation.Entity;
			}
			set
			{
				REP_Transportation previousValue = this._REP_Transportation.Entity;
				if (((previousValue != value) 
							|| (this._REP_Transportation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REP_Transportation.Entity = null;
						previousValue.REP_ReceptDetails.Remove(this);
					}
					this._REP_Transportation.Entity = value;
					if ((value != null))
					{
						value.REP_ReceptDetails.Add(this);
						this._ReceptDetailID = value.TransportID;
					}
					else
					{
						this._ReceptDetailID = default(int);
					}
					this.SendPropertyChanged("REP_Transportation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REP_Recepts")]
	public partial class REP_Recept : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReceptID;
		
		private string _ReceptCode;
		
		private int _AreaCode;
		
		private byte _RepositoryID;
		
		private System.DateTime _ReceptDate;
		
		private byte _ReceptType;
		
		private string _Comment;
		
		private EntitySet<REP_ReceptDetail> _REP_ReceptDetails;
		
		private EntityRef<Area> _Area;
		
		private EntityRef<REP_ReceptType> _REP_ReceptType;
		
		private EntityRef<REP_Repository> _REP_Repository;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceptIDChanging(int value);
    partial void OnReceptIDChanged();
    partial void OnReceptCodeChanging(string value);
    partial void OnReceptCodeChanged();
    partial void OnAreaCodeChanging(int value);
    partial void OnAreaCodeChanged();
    partial void OnRepositoryIDChanging(byte value);
    partial void OnRepositoryIDChanged();
    partial void OnReceptDateChanging(System.DateTime value);
    partial void OnReceptDateChanged();
    partial void OnReceptTypeChanging(byte value);
    partial void OnReceptTypeChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public REP_Recept()
		{
			this._REP_ReceptDetails = new EntitySet<REP_ReceptDetail>(new Action<REP_ReceptDetail>(this.attach_REP_ReceptDetails), new Action<REP_ReceptDetail>(this.detach_REP_ReceptDetails));
			this._Area = default(EntityRef<Area>);
			this._REP_ReceptType = default(EntityRef<REP_ReceptType>);
			this._REP_Repository = default(EntityRef<REP_Repository>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReceptID
		{
			get
			{
				return this._ReceptID;
			}
			set
			{
				if ((this._ReceptID != value))
				{
					this.OnReceptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceptID = value;
					this.SendPropertyChanged("ReceptID");
					this.OnReceptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptCode", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string ReceptCode
		{
			get
			{
				return this._ReceptCode;
			}
			set
			{
				if ((this._ReceptCode != value))
				{
					this.OnReceptCodeChanging(value);
					this.SendPropertyChanging();
					this._ReceptCode = value;
					this.SendPropertyChanged("ReceptCode");
					this.OnReceptCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaCode", DbType="Int NOT NULL")]
		public int AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepositoryID", DbType="TinyInt NOT NULL")]
		public byte RepositoryID
		{
			get
			{
				return this._RepositoryID;
			}
			set
			{
				if ((this._RepositoryID != value))
				{
					if (this._REP_Repository.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepositoryIDChanging(value);
					this.SendPropertyChanging();
					this._RepositoryID = value;
					this.SendPropertyChanged("RepositoryID");
					this.OnRepositoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptDate", DbType="Date NOT NULL")]
		public System.DateTime ReceptDate
		{
			get
			{
				return this._ReceptDate;
			}
			set
			{
				if ((this._ReceptDate != value))
				{
					this.OnReceptDateChanging(value);
					this.SendPropertyChanging();
					this._ReceptDate = value;
					this.SendPropertyChanged("ReceptDate");
					this.OnReceptDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptType", DbType="TinyInt NOT NULL")]
		public byte ReceptType
		{
			get
			{
				return this._ReceptType;
			}
			set
			{
				if ((this._ReceptType != value))
				{
					if (this._REP_ReceptType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceptTypeChanging(value);
					this.SendPropertyChanging();
					this._ReceptType = value;
					this.SendPropertyChanged("ReceptType");
					this.OnReceptTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(200)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ReceptDetails_Recepts", Storage="_REP_ReceptDetails", ThisKey="ReceptID", OtherKey="ReceptID", DeleteRule="NO ACTION")]
		public EntitySet<REP_ReceptDetail> REP_ReceptDetails
		{
			get
			{
				return this._REP_ReceptDetails;
			}
			set
			{
				this._REP_ReceptDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Recepts_Areas", Storage="_Area", ThisKey="AreaCode", OtherKey="AreaCode", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.REP_Recepts.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.REP_Recepts.Add(this);
						this._AreaCode = value.AreaCode;
					}
					else
					{
						this._AreaCode = default(int);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Recepts_REP_ReceptTypes", Storage="_REP_ReceptType", ThisKey="ReceptType", OtherKey="ReceptTypeID", IsForeignKey=true)]
		public REP_ReceptType REP_ReceptType
		{
			get
			{
				return this._REP_ReceptType.Entity;
			}
			set
			{
				REP_ReceptType previousValue = this._REP_ReceptType.Entity;
				if (((previousValue != value) 
							|| (this._REP_ReceptType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REP_ReceptType.Entity = null;
						previousValue.REP_Recepts.Remove(this);
					}
					this._REP_ReceptType.Entity = value;
					if ((value != null))
					{
						value.REP_Recepts.Add(this);
						this._ReceptType = value.ReceptTypeID;
					}
					else
					{
						this._ReceptType = default(byte);
					}
					this.SendPropertyChanged("REP_ReceptType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Recepts_REP_Repositories", Storage="_REP_Repository", ThisKey="RepositoryID", OtherKey="RepositoryID", IsForeignKey=true)]
		public REP_Repository REP_Repository
		{
			get
			{
				return this._REP_Repository.Entity;
			}
			set
			{
				REP_Repository previousValue = this._REP_Repository.Entity;
				if (((previousValue != value) 
							|| (this._REP_Repository.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REP_Repository.Entity = null;
						previousValue.REP_Recepts.Remove(this);
					}
					this._REP_Repository.Entity = value;
					if ((value != null))
					{
						value.REP_Recepts.Add(this);
						this._RepositoryID = value.RepositoryID;
					}
					else
					{
						this._RepositoryID = default(byte);
					}
					this.SendPropertyChanged("REP_Repository");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REP_ReceptDetails(REP_ReceptDetail entity)
		{
			this.SendPropertyChanging();
			entity.REP_Recept = this;
		}
		
		private void detach_REP_ReceptDetails(REP_ReceptDetail entity)
		{
			this.SendPropertyChanging();
			entity.REP_Recept = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REP_ReceptTypes")]
	public partial class REP_ReceptType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ReceptTypeID;
		
		private string _ReceptTypeName;
		
		private EntitySet<REP_Recept> _REP_Recepts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceptTypeIDChanging(byte value);
    partial void OnReceptTypeIDChanged();
    partial void OnReceptTypeNameChanging(string value);
    partial void OnReceptTypeNameChanged();
    #endregion
		
		public REP_ReceptType()
		{
			this._REP_Recepts = new EntitySet<REP_Recept>(new Action<REP_Recept>(this.attach_REP_Recepts), new Action<REP_Recept>(this.detach_REP_Recepts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptTypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ReceptTypeID
		{
			get
			{
				return this._ReceptTypeID;
			}
			set
			{
				if ((this._ReceptTypeID != value))
				{
					this.OnReceptTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ReceptTypeID = value;
					this.SendPropertyChanged("ReceptTypeID");
					this.OnReceptTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ReceptTypeName
		{
			get
			{
				return this._ReceptTypeName;
			}
			set
			{
				if ((this._ReceptTypeName != value))
				{
					this.OnReceptTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ReceptTypeName = value;
					this.SendPropertyChanged("ReceptTypeName");
					this.OnReceptTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Recepts_REP_ReceptTypes", Storage="_REP_Recepts", ThisKey="ReceptTypeID", OtherKey="ReceptType", DeleteRule="NO ACTION")]
		public EntitySet<REP_Recept> REP_Recepts
		{
			get
			{
				return this._REP_Recepts;
			}
			set
			{
				this._REP_Recepts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REP_Recepts(REP_Recept entity)
		{
			this.SendPropertyChanging();
			entity.REP_ReceptType = this;
		}
		
		private void detach_REP_Recepts(REP_Recept entity)
		{
			this.SendPropertyChanging();
			entity.REP_ReceptType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REP_Repositories")]
	public partial class REP_Repository : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RepositoryID;
		
		private byte _RepositoryTypeID;
		
		private string _RepositoryName;
		
		private string _Phone1;
		
		private string _Phone2;
		
		private string _Address;
		
		private EntitySet<REP_Recept> _REP_Recepts;
		
		private EntityRef<REP_RepositoryType> _REP_RepositoryType;
		
		private EntitySet<REP_RepositoryStuff> _REP_RepositoryStuffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRepositoryIDChanging(byte value);
    partial void OnRepositoryIDChanged();
    partial void OnRepositoryTypeIDChanging(byte value);
    partial void OnRepositoryTypeIDChanged();
    partial void OnRepositoryNameChanging(string value);
    partial void OnRepositoryNameChanged();
    partial void OnPhone1Changing(string value);
    partial void OnPhone1Changed();
    partial void OnPhone2Changing(string value);
    partial void OnPhone2Changed();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public REP_Repository()
		{
			this._REP_Recepts = new EntitySet<REP_Recept>(new Action<REP_Recept>(this.attach_REP_Recepts), new Action<REP_Recept>(this.detach_REP_Recepts));
			this._REP_RepositoryType = default(EntityRef<REP_RepositoryType>);
			this._REP_RepositoryStuffs = new EntitySet<REP_RepositoryStuff>(new Action<REP_RepositoryStuff>(this.attach_REP_RepositoryStuffs), new Action<REP_RepositoryStuff>(this.detach_REP_RepositoryStuffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepositoryID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte RepositoryID
		{
			get
			{
				return this._RepositoryID;
			}
			set
			{
				if ((this._RepositoryID != value))
				{
					this.OnRepositoryIDChanging(value);
					this.SendPropertyChanging();
					this._RepositoryID = value;
					this.SendPropertyChanged("RepositoryID");
					this.OnRepositoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepositoryTypeID", DbType="TinyInt NOT NULL")]
		public byte RepositoryTypeID
		{
			get
			{
				return this._RepositoryTypeID;
			}
			set
			{
				if ((this._RepositoryTypeID != value))
				{
					if (this._REP_RepositoryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepositoryTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RepositoryTypeID = value;
					this.SendPropertyChanged("RepositoryTypeID");
					this.OnRepositoryTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepositoryName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string RepositoryName
		{
			get
			{
				return this._RepositoryName;
			}
			set
			{
				if ((this._RepositoryName != value))
				{
					this.OnRepositoryNameChanging(value);
					this.SendPropertyChanging();
					this._RepositoryName = value;
					this.SendPropertyChanged("RepositoryName");
					this.OnRepositoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone1", DbType="VarChar(14)")]
		public string Phone1
		{
			get
			{
				return this._Phone1;
			}
			set
			{
				if ((this._Phone1 != value))
				{
					this.OnPhone1Changing(value);
					this.SendPropertyChanging();
					this._Phone1 = value;
					this.SendPropertyChanged("Phone1");
					this.OnPhone1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone2", DbType="VarChar(14)")]
		public string Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Recepts_REP_Repositories", Storage="_REP_Recepts", ThisKey="RepositoryID", OtherKey="RepositoryID", DeleteRule="NO ACTION")]
		public EntitySet<REP_Recept> REP_Recepts
		{
			get
			{
				return this._REP_Recepts;
			}
			set
			{
				this._REP_Recepts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Repositories_REP_RepositoryTypes", Storage="_REP_RepositoryType", ThisKey="RepositoryTypeID", OtherKey="RepositoryTypeID", IsForeignKey=true)]
		public REP_RepositoryType REP_RepositoryType
		{
			get
			{
				return this._REP_RepositoryType.Entity;
			}
			set
			{
				REP_RepositoryType previousValue = this._REP_RepositoryType.Entity;
				if (((previousValue != value) 
							|| (this._REP_RepositoryType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REP_RepositoryType.Entity = null;
						previousValue.REP_Repositories.Remove(this);
					}
					this._REP_RepositoryType.Entity = value;
					if ((value != null))
					{
						value.REP_Repositories.Add(this);
						this._RepositoryTypeID = value.RepositoryTypeID;
					}
					else
					{
						this._RepositoryTypeID = default(byte);
					}
					this.SendPropertyChanged("REP_RepositoryType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Repository_Good_REP_Repositories", Storage="_REP_RepositoryStuffs", ThisKey="RepositoryID", OtherKey="RepositoryID", DeleteRule="NO ACTION")]
		public EntitySet<REP_RepositoryStuff> REP_RepositoryStuffs
		{
			get
			{
				return this._REP_RepositoryStuffs;
			}
			set
			{
				this._REP_RepositoryStuffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REP_Recepts(REP_Recept entity)
		{
			this.SendPropertyChanging();
			entity.REP_Repository = this;
		}
		
		private void detach_REP_Recepts(REP_Recept entity)
		{
			this.SendPropertyChanging();
			entity.REP_Repository = null;
		}
		
		private void attach_REP_RepositoryStuffs(REP_RepositoryStuff entity)
		{
			this.SendPropertyChanging();
			entity.REP_Repository = this;
		}
		
		private void detach_REP_RepositoryStuffs(REP_RepositoryStuff entity)
		{
			this.SendPropertyChanging();
			entity.REP_Repository = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REP_RepositoryStuffs")]
	public partial class REP_RepositoryStuff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RepositoryStuffID;
		
		private byte _RepositoryID;
		
		private int _StuffID;
		
		private int _BalanceByFirstUnitID;
		
		private System.Nullable<short> _BalanceBySecondUnitID;
		
		private System.Nullable<short> _BalanceByThirdUnitID;
		
		private EntityRef<REP_Repository> _REP_Repository;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRepositoryStuffIDChanging(int value);
    partial void OnRepositoryStuffIDChanged();
    partial void OnRepositoryIDChanging(byte value);
    partial void OnRepositoryIDChanged();
    partial void OnStuffIDChanging(int value);
    partial void OnStuffIDChanged();
    partial void OnBalanceByFirstUnitIDChanging(int value);
    partial void OnBalanceByFirstUnitIDChanged();
    partial void OnBalanceBySecondUnitIDChanging(System.Nullable<short> value);
    partial void OnBalanceBySecondUnitIDChanged();
    partial void OnBalanceByThirdUnitIDChanging(System.Nullable<short> value);
    partial void OnBalanceByThirdUnitIDChanged();
    #endregion
		
		public REP_RepositoryStuff()
		{
			this._REP_Repository = default(EntityRef<REP_Repository>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepositoryStuffID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RepositoryStuffID
		{
			get
			{
				return this._RepositoryStuffID;
			}
			set
			{
				if ((this._RepositoryStuffID != value))
				{
					this.OnRepositoryStuffIDChanging(value);
					this.SendPropertyChanging();
					this._RepositoryStuffID = value;
					this.SendPropertyChanged("RepositoryStuffID");
					this.OnRepositoryStuffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepositoryID", DbType="TinyInt NOT NULL")]
		public byte RepositoryID
		{
			get
			{
				return this._RepositoryID;
			}
			set
			{
				if ((this._RepositoryID != value))
				{
					if (this._REP_Repository.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepositoryIDChanging(value);
					this.SendPropertyChanging();
					this._RepositoryID = value;
					this.SendPropertyChanged("RepositoryID");
					this.OnRepositoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StuffID", DbType="Int NOT NULL")]
		public int StuffID
		{
			get
			{
				return this._StuffID;
			}
			set
			{
				if ((this._StuffID != value))
				{
					this.OnStuffIDChanging(value);
					this.SendPropertyChanging();
					this._StuffID = value;
					this.SendPropertyChanged("StuffID");
					this.OnStuffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceByFirstUnitID", DbType="Int NOT NULL")]
		public int BalanceByFirstUnitID
		{
			get
			{
				return this._BalanceByFirstUnitID;
			}
			set
			{
				if ((this._BalanceByFirstUnitID != value))
				{
					this.OnBalanceByFirstUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BalanceByFirstUnitID = value;
					this.SendPropertyChanged("BalanceByFirstUnitID");
					this.OnBalanceByFirstUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceBySecondUnitID", DbType="SmallInt")]
		public System.Nullable<short> BalanceBySecondUnitID
		{
			get
			{
				return this._BalanceBySecondUnitID;
			}
			set
			{
				if ((this._BalanceBySecondUnitID != value))
				{
					this.OnBalanceBySecondUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BalanceBySecondUnitID = value;
					this.SendPropertyChanged("BalanceBySecondUnitID");
					this.OnBalanceBySecondUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceByThirdUnitID", DbType="SmallInt")]
		public System.Nullable<short> BalanceByThirdUnitID
		{
			get
			{
				return this._BalanceByThirdUnitID;
			}
			set
			{
				if ((this._BalanceByThirdUnitID != value))
				{
					this.OnBalanceByThirdUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BalanceByThirdUnitID = value;
					this.SendPropertyChanged("BalanceByThirdUnitID");
					this.OnBalanceByThirdUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Repository_Good_REP_Repositories", Storage="_REP_Repository", ThisKey="RepositoryID", OtherKey="RepositoryID", IsForeignKey=true)]
		public REP_Repository REP_Repository
		{
			get
			{
				return this._REP_Repository.Entity;
			}
			set
			{
				REP_Repository previousValue = this._REP_Repository.Entity;
				if (((previousValue != value) 
							|| (this._REP_Repository.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REP_Repository.Entity = null;
						previousValue.REP_RepositoryStuffs.Remove(this);
					}
					this._REP_Repository.Entity = value;
					if ((value != null))
					{
						value.REP_RepositoryStuffs.Add(this);
						this._RepositoryID = value.RepositoryID;
					}
					else
					{
						this._RepositoryID = default(byte);
					}
					this.SendPropertyChanged("REP_Repository");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REP_RepositoryTypes")]
	public partial class REP_RepositoryType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RepositoryTypeID;
		
		private string _TypeName;
		
		private EntitySet<REP_Repository> _REP_Repositories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRepositoryTypeIDChanging(byte value);
    partial void OnRepositoryTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public REP_RepositoryType()
		{
			this._REP_Repositories = new EntitySet<REP_Repository>(new Action<REP_Repository>(this.attach_REP_Repositories), new Action<REP_Repository>(this.detach_REP_Repositories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepositoryTypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte RepositoryTypeID
		{
			get
			{
				return this._RepositoryTypeID;
			}
			set
			{
				if ((this._RepositoryTypeID != value))
				{
					this.OnRepositoryTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RepositoryTypeID = value;
					this.SendPropertyChanged("RepositoryTypeID");
					this.OnRepositoryTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Repositories_REP_RepositoryTypes", Storage="_REP_Repositories", ThisKey="RepositoryTypeID", OtherKey="RepositoryTypeID", DeleteRule="NO ACTION")]
		public EntitySet<REP_Repository> REP_Repositories
		{
			get
			{
				return this._REP_Repositories;
			}
			set
			{
				this._REP_Repositories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REP_Repositories(REP_Repository entity)
		{
			this.SendPropertyChanging();
			entity.REP_RepositoryType = this;
		}
		
		private void detach_REP_Repositories(REP_Repository entity)
		{
			this.SendPropertyChanging();
			entity.REP_RepositoryType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REP_Stuffs")]
	public partial class REP_Stuff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StuffID;
		
		private string _StuffName;
		
		private byte _StuffTypeID;
		
		private string _TechnicalInfo;
		
		private byte _PrimaryUnitID;
		
		private byte _SecondaryUnitID;
		
		private byte _ThirdUnitID;
		
		private System.Nullable<byte> _FirstConversionCoefficient;
		
		private System.Nullable<byte> _SecondConversionCoefficient;
		
		private string _ProducerCompany;
		
		private string _ProducerCountry;
		
		private string _Capacity;
		
		private string _Color;
		
		private string _Size;
		
		private System.DateTime _SubmitDate;
		
		private EntitySet<CycleClothe> _CycleClothes;
		
		private EntitySet<CycleFood> _CycleFoods;
		
		private EntitySet<CyclePaperity> _CyclePaperities;
		
		private EntitySet<REP_ReceptDetail> _REP_ReceptDetails;
		
		private EntityRef<REP_StuffType> _REP_StuffType;
		
		private EntityRef<REP_Unit> _REP_Unit;
		
		private EntityRef<REP_Unit> _SecondaryUnit;
		
		private EntityRef<REP_Unit> _ThirdUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStuffIDChanging(int value);
    partial void OnStuffIDChanged();
    partial void OnStuffNameChanging(string value);
    partial void OnStuffNameChanged();
    partial void OnStuffTypeIDChanging(byte value);
    partial void OnStuffTypeIDChanged();
    partial void OnTechnicalInfoChanging(string value);
    partial void OnTechnicalInfoChanged();
    partial void OnPrimaryUnitIDChanging(byte value);
    partial void OnPrimaryUnitIDChanged();
    partial void OnSecondaryUnitIDChanging(byte value);
    partial void OnSecondaryUnitIDChanged();
    partial void OnThirdUnitIDChanging(byte value);
    partial void OnThirdUnitIDChanged();
    partial void OnFirstConversionCoefficientChanging(System.Nullable<byte> value);
    partial void OnFirstConversionCoefficientChanged();
    partial void OnSecondConversionCoefficientChanging(System.Nullable<byte> value);
    partial void OnSecondConversionCoefficientChanged();
    partial void OnProducerCompanyChanging(string value);
    partial void OnProducerCompanyChanged();
    partial void OnProducerCountryChanging(string value);
    partial void OnProducerCountryChanged();
    partial void OnCapacityChanging(string value);
    partial void OnCapacityChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public REP_Stuff()
		{
			this._CycleClothes = new EntitySet<CycleClothe>(new Action<CycleClothe>(this.attach_CycleClothes), new Action<CycleClothe>(this.detach_CycleClothes));
			this._CycleFoods = new EntitySet<CycleFood>(new Action<CycleFood>(this.attach_CycleFoods), new Action<CycleFood>(this.detach_CycleFoods));
			this._CyclePaperities = new EntitySet<CyclePaperity>(new Action<CyclePaperity>(this.attach_CyclePaperities), new Action<CyclePaperity>(this.detach_CyclePaperities));
			this._REP_ReceptDetails = new EntitySet<REP_ReceptDetail>(new Action<REP_ReceptDetail>(this.attach_REP_ReceptDetails), new Action<REP_ReceptDetail>(this.detach_REP_ReceptDetails));
			this._REP_StuffType = default(EntityRef<REP_StuffType>);
			this._REP_Unit = default(EntityRef<REP_Unit>);
			this._SecondaryUnit = default(EntityRef<REP_Unit>);
			this._ThirdUnit = default(EntityRef<REP_Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StuffID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StuffID
		{
			get
			{
				return this._StuffID;
			}
			set
			{
				if ((this._StuffID != value))
				{
					this.OnStuffIDChanging(value);
					this.SendPropertyChanging();
					this._StuffID = value;
					this.SendPropertyChanged("StuffID");
					this.OnStuffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StuffName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string StuffName
		{
			get
			{
				return this._StuffName;
			}
			set
			{
				if ((this._StuffName != value))
				{
					this.OnStuffNameChanging(value);
					this.SendPropertyChanging();
					this._StuffName = value;
					this.SendPropertyChanged("StuffName");
					this.OnStuffNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StuffTypeID", DbType="TinyInt NOT NULL")]
		public byte StuffTypeID
		{
			get
			{
				return this._StuffTypeID;
			}
			set
			{
				if ((this._StuffTypeID != value))
				{
					if (this._REP_StuffType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStuffTypeIDChanging(value);
					this.SendPropertyChanging();
					this._StuffTypeID = value;
					this.SendPropertyChanged("StuffTypeID");
					this.OnStuffTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnicalInfo", DbType="NVarChar(100)")]
		public string TechnicalInfo
		{
			get
			{
				return this._TechnicalInfo;
			}
			set
			{
				if ((this._TechnicalInfo != value))
				{
					this.OnTechnicalInfoChanging(value);
					this.SendPropertyChanging();
					this._TechnicalInfo = value;
					this.SendPropertyChanged("TechnicalInfo");
					this.OnTechnicalInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryUnitID", DbType="TinyInt NOT NULL")]
		public byte PrimaryUnitID
		{
			get
			{
				return this._PrimaryUnitID;
			}
			set
			{
				if ((this._PrimaryUnitID != value))
				{
					if (this._REP_Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrimaryUnitIDChanging(value);
					this.SendPropertyChanging();
					this._PrimaryUnitID = value;
					this.SendPropertyChanged("PrimaryUnitID");
					this.OnPrimaryUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondaryUnitID", DbType="TinyInt NOT NULL")]
		public byte SecondaryUnitID
		{
			get
			{
				return this._SecondaryUnitID;
			}
			set
			{
				if ((this._SecondaryUnitID != value))
				{
					if (this._SecondaryUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecondaryUnitIDChanging(value);
					this.SendPropertyChanging();
					this._SecondaryUnitID = value;
					this.SendPropertyChanged("SecondaryUnitID");
					this.OnSecondaryUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdUnitID", DbType="TinyInt NOT NULL")]
		public byte ThirdUnitID
		{
			get
			{
				return this._ThirdUnitID;
			}
			set
			{
				if ((this._ThirdUnitID != value))
				{
					if (this._ThirdUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThirdUnitIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdUnitID = value;
					this.SendPropertyChanged("ThirdUnitID");
					this.OnThirdUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstConversionCoefficient", DbType="TinyInt")]
		public System.Nullable<byte> FirstConversionCoefficient
		{
			get
			{
				return this._FirstConversionCoefficient;
			}
			set
			{
				if ((this._FirstConversionCoefficient != value))
				{
					this.OnFirstConversionCoefficientChanging(value);
					this.SendPropertyChanging();
					this._FirstConversionCoefficient = value;
					this.SendPropertyChanged("FirstConversionCoefficient");
					this.OnFirstConversionCoefficientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondConversionCoefficient", DbType="TinyInt")]
		public System.Nullable<byte> SecondConversionCoefficient
		{
			get
			{
				return this._SecondConversionCoefficient;
			}
			set
			{
				if ((this._SecondConversionCoefficient != value))
				{
					this.OnSecondConversionCoefficientChanging(value);
					this.SendPropertyChanging();
					this._SecondConversionCoefficient = value;
					this.SendPropertyChanged("SecondConversionCoefficient");
					this.OnSecondConversionCoefficientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProducerCompany", DbType="NVarChar(30)")]
		public string ProducerCompany
		{
			get
			{
				return this._ProducerCompany;
			}
			set
			{
				if ((this._ProducerCompany != value))
				{
					this.OnProducerCompanyChanging(value);
					this.SendPropertyChanging();
					this._ProducerCompany = value;
					this.SendPropertyChanged("ProducerCompany");
					this.OnProducerCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProducerCountry", DbType="NVarChar(20)")]
		public string ProducerCountry
		{
			get
			{
				return this._ProducerCountry;
			}
			set
			{
				if ((this._ProducerCountry != value))
				{
					this.OnProducerCountryChanging(value);
					this.SendPropertyChanging();
					this._ProducerCountry = value;
					this.SendPropertyChanged("ProducerCountry");
					this.OnProducerCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="VarChar(50)")]
		public string Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(15)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="VarChar(5)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CycleClothes_REP_Stuffs", Storage="_CycleClothes", ThisKey="StuffID", OtherKey="StuffID", DeleteRule="NO ACTION")]
		public EntitySet<CycleClothe> CycleClothes
		{
			get
			{
				return this._CycleClothes;
			}
			set
			{
				this._CycleClothes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CycleFoods_REP_Stuffs", Storage="_CycleFoods", ThisKey="StuffID", OtherKey="StuffID", DeleteRule="NO ACTION")]
		public EntitySet<CycleFood> CycleFoods
		{
			get
			{
				return this._CycleFoods;
			}
			set
			{
				this._CycleFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CyclePaperities_REP_Stuffs", Storage="_CyclePaperities", ThisKey="StuffID", OtherKey="StuffID", DeleteRule="NO ACTION")]
		public EntitySet<CyclePaperity> CyclePaperities
		{
			get
			{
				return this._CyclePaperities;
			}
			set
			{
				this._CyclePaperities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_ReceptDetails_REP_Stuffs", Storage="_REP_ReceptDetails", ThisKey="StuffID", OtherKey="StuffID", DeleteRule="NO ACTION")]
		public EntitySet<REP_ReceptDetail> REP_ReceptDetails
		{
			get
			{
				return this._REP_ReceptDetails;
			}
			set
			{
				this._REP_ReceptDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Stuffs_REP_StuffTypes", Storage="_REP_StuffType", ThisKey="StuffTypeID", OtherKey="StuffTypeID", IsForeignKey=true)]
		public REP_StuffType REP_StuffType
		{
			get
			{
				return this._REP_StuffType.Entity;
			}
			set
			{
				REP_StuffType previousValue = this._REP_StuffType.Entity;
				if (((previousValue != value) 
							|| (this._REP_StuffType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REP_StuffType.Entity = null;
						previousValue.REP_Stuffs.Remove(this);
					}
					this._REP_StuffType.Entity = value;
					if ((value != null))
					{
						value.REP_Stuffs.Add(this);
						this._StuffTypeID = value.StuffTypeID;
					}
					else
					{
						this._StuffTypeID = default(byte);
					}
					this.SendPropertyChanged("REP_StuffType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Stuffs_REP_Units", Storage="_REP_Unit", ThisKey="PrimaryUnitID", OtherKey="UnitID", IsForeignKey=true)]
		public REP_Unit REP_Unit
		{
			get
			{
				return this._REP_Unit.Entity;
			}
			set
			{
				REP_Unit previousValue = this._REP_Unit.Entity;
				if (((previousValue != value) 
							|| (this._REP_Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REP_Unit.Entity = null;
						previousValue.REP_Stuffs.Remove(this);
					}
					this._REP_Unit.Entity = value;
					if ((value != null))
					{
						value.REP_Stuffs.Add(this);
						this._PrimaryUnitID = value.UnitID;
					}
					else
					{
						this._PrimaryUnitID = default(byte);
					}
					this.SendPropertyChanged("REP_Unit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Stuffs_REP_Units1", Storage="_SecondaryUnit", ThisKey="SecondaryUnitID", OtherKey="UnitID", IsForeignKey=true)]
		public REP_Unit SecondaryUnit
		{
			get
			{
				return this._SecondaryUnit.Entity;
			}
			set
			{
				REP_Unit previousValue = this._SecondaryUnit.Entity;
				if (((previousValue != value) 
							|| (this._SecondaryUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondaryUnit.Entity = null;
						previousValue.Units.Remove(this);
					}
					this._SecondaryUnit.Entity = value;
					if ((value != null))
					{
						value.Units.Add(this);
						this._SecondaryUnitID = value.UnitID;
					}
					else
					{
						this._SecondaryUnitID = default(byte);
					}
					this.SendPropertyChanged("SecondaryUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Stuffs_REP_Units2", Storage="_ThirdUnit", ThisKey="ThirdUnitID", OtherKey="UnitID", IsForeignKey=true)]
		public REP_Unit ThirdUnit
		{
			get
			{
				return this._ThirdUnit.Entity;
			}
			set
			{
				REP_Unit previousValue = this._ThirdUnit.Entity;
				if (((previousValue != value) 
							|| (this._ThirdUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdUnit.Entity = null;
						previousValue.REP_Stuffs_REP_Units2s.Remove(this);
					}
					this._ThirdUnit.Entity = value;
					if ((value != null))
					{
						value.REP_Stuffs_REP_Units2s.Add(this);
						this._ThirdUnitID = value.UnitID;
					}
					else
					{
						this._ThirdUnitID = default(byte);
					}
					this.SendPropertyChanged("ThirdUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CycleClothes(CycleClothe entity)
		{
			this.SendPropertyChanging();
			entity.REP_Stuff = this;
		}
		
		private void detach_CycleClothes(CycleClothe entity)
		{
			this.SendPropertyChanging();
			entity.REP_Stuff = null;
		}
		
		private void attach_CycleFoods(CycleFood entity)
		{
			this.SendPropertyChanging();
			entity.REP_Stuff = this;
		}
		
		private void detach_CycleFoods(CycleFood entity)
		{
			this.SendPropertyChanging();
			entity.REP_Stuff = null;
		}
		
		private void attach_CyclePaperities(CyclePaperity entity)
		{
			this.SendPropertyChanging();
			entity.REP_Stuff = this;
		}
		
		private void detach_CyclePaperities(CyclePaperity entity)
		{
			this.SendPropertyChanging();
			entity.REP_Stuff = null;
		}
		
		private void attach_REP_ReceptDetails(REP_ReceptDetail entity)
		{
			this.SendPropertyChanging();
			entity.REP_Stuff = this;
		}
		
		private void detach_REP_ReceptDetails(REP_ReceptDetail entity)
		{
			this.SendPropertyChanging();
			entity.REP_Stuff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REP_StuffTypes")]
	public partial class REP_StuffType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _StuffTypeID;
		
		private string _TypeName;
		
		private EntitySet<REP_Stuff> _REP_Stuffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStuffTypeIDChanging(byte value);
    partial void OnStuffTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public REP_StuffType()
		{
			this._REP_Stuffs = new EntitySet<REP_Stuff>(new Action<REP_Stuff>(this.attach_REP_Stuffs), new Action<REP_Stuff>(this.detach_REP_Stuffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StuffTypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte StuffTypeID
		{
			get
			{
				return this._StuffTypeID;
			}
			set
			{
				if ((this._StuffTypeID != value))
				{
					this.OnStuffTypeIDChanging(value);
					this.SendPropertyChanging();
					this._StuffTypeID = value;
					this.SendPropertyChanged("StuffTypeID");
					this.OnStuffTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Stuffs_REP_StuffTypes", Storage="_REP_Stuffs", ThisKey="StuffTypeID", OtherKey="StuffTypeID", DeleteRule="NO ACTION")]
		public EntitySet<REP_Stuff> REP_Stuffs
		{
			get
			{
				return this._REP_Stuffs;
			}
			set
			{
				this._REP_Stuffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REP_Stuffs(REP_Stuff entity)
		{
			this.SendPropertyChanging();
			entity.REP_StuffType = this;
		}
		
		private void detach_REP_Stuffs(REP_Stuff entity)
		{
			this.SendPropertyChanging();
			entity.REP_StuffType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REP_Transportations")]
	public partial class REP_Transportation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransportID;
		
		private int _ReceptDetailID;
		
		private string _LicensePlateNo;
		
		private string _DriverName;
		
		private string _DriverPhone;
		
		private string _BillOfLading;
		
		private string _InsuranceNo;
		
		private System.DateTime _TransportDate;
		
		private short _FirstBalance;
		
		private System.Nullable<short> _SecondBalance;
		
		private System.Nullable<short> _ThirdBalance;
		
		private string _Comment;
		
		private System.Nullable<System.DateTime> _DeliverDate;
		
		private EntitySet<REP_ReceptDetail> _REP_ReceptDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransportIDChanging(int value);
    partial void OnTransportIDChanged();
    partial void OnReceptDetailIDChanging(int value);
    partial void OnReceptDetailIDChanged();
    partial void OnLicensePlateNoChanging(string value);
    partial void OnLicensePlateNoChanged();
    partial void OnDriverNameChanging(string value);
    partial void OnDriverNameChanged();
    partial void OnDriverPhoneChanging(string value);
    partial void OnDriverPhoneChanged();
    partial void OnBillOfLadingChanging(string value);
    partial void OnBillOfLadingChanged();
    partial void OnInsuranceNoChanging(string value);
    partial void OnInsuranceNoChanged();
    partial void OnTransportDateChanging(System.DateTime value);
    partial void OnTransportDateChanged();
    partial void OnFirstBalanceChanging(short value);
    partial void OnFirstBalanceChanged();
    partial void OnSecondBalanceChanging(System.Nullable<short> value);
    partial void OnSecondBalanceChanged();
    partial void OnThirdBalanceChanging(System.Nullable<short> value);
    partial void OnThirdBalanceChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnDeliverDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliverDateChanged();
    #endregion
		
		public REP_Transportation()
		{
			this._REP_ReceptDetails = new EntitySet<REP_ReceptDetail>(new Action<REP_ReceptDetail>(this.attach_REP_ReceptDetails), new Action<REP_ReceptDetail>(this.detach_REP_ReceptDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransportID
		{
			get
			{
				return this._TransportID;
			}
			set
			{
				if ((this._TransportID != value))
				{
					this.OnTransportIDChanging(value);
					this.SendPropertyChanging();
					this._TransportID = value;
					this.SendPropertyChanged("TransportID");
					this.OnTransportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptDetailID", DbType="Int NOT NULL")]
		public int ReceptDetailID
		{
			get
			{
				return this._ReceptDetailID;
			}
			set
			{
				if ((this._ReceptDetailID != value))
				{
					this.OnReceptDetailIDChanging(value);
					this.SendPropertyChanging();
					this._ReceptDetailID = value;
					this.SendPropertyChanged("ReceptDetailID");
					this.OnReceptDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicensePlateNo", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string LicensePlateNo
		{
			get
			{
				return this._LicensePlateNo;
			}
			set
			{
				if ((this._LicensePlateNo != value))
				{
					this.OnLicensePlateNoChanging(value);
					this.SendPropertyChanging();
					this._LicensePlateNo = value;
					this.SendPropertyChanged("LicensePlateNo");
					this.OnLicensePlateNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string DriverName
		{
			get
			{
				return this._DriverName;
			}
			set
			{
				if ((this._DriverName != value))
				{
					this.OnDriverNameChanging(value);
					this.SendPropertyChanging();
					this._DriverName = value;
					this.SendPropertyChanged("DriverName");
					this.OnDriverNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverPhone", DbType="VarChar(14)")]
		public string DriverPhone
		{
			get
			{
				return this._DriverPhone;
			}
			set
			{
				if ((this._DriverPhone != value))
				{
					this.OnDriverPhoneChanging(value);
					this.SendPropertyChanging();
					this._DriverPhone = value;
					this.SendPropertyChanged("DriverPhone");
					this.OnDriverPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillOfLading", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string BillOfLading
		{
			get
			{
				return this._BillOfLading;
			}
			set
			{
				if ((this._BillOfLading != value))
				{
					this.OnBillOfLadingChanging(value);
					this.SendPropertyChanging();
					this._BillOfLading = value;
					this.SendPropertyChanged("BillOfLading");
					this.OnBillOfLadingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceNo", DbType="NVarChar(15)")]
		public string InsuranceNo
		{
			get
			{
				return this._InsuranceNo;
			}
			set
			{
				if ((this._InsuranceNo != value))
				{
					this.OnInsuranceNoChanging(value);
					this.SendPropertyChanging();
					this._InsuranceNo = value;
					this.SendPropertyChanged("InsuranceNo");
					this.OnInsuranceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransportDate", DbType="Date NOT NULL")]
		public System.DateTime TransportDate
		{
			get
			{
				return this._TransportDate;
			}
			set
			{
				if ((this._TransportDate != value))
				{
					this.OnTransportDateChanging(value);
					this.SendPropertyChanging();
					this._TransportDate = value;
					this.SendPropertyChanged("TransportDate");
					this.OnTransportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstBalance", DbType="SmallInt NOT NULL")]
		public short FirstBalance
		{
			get
			{
				return this._FirstBalance;
			}
			set
			{
				if ((this._FirstBalance != value))
				{
					this.OnFirstBalanceChanging(value);
					this.SendPropertyChanging();
					this._FirstBalance = value;
					this.SendPropertyChanged("FirstBalance");
					this.OnFirstBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondBalance", DbType="SmallInt")]
		public System.Nullable<short> SecondBalance
		{
			get
			{
				return this._SecondBalance;
			}
			set
			{
				if ((this._SecondBalance != value))
				{
					this.OnSecondBalanceChanging(value);
					this.SendPropertyChanging();
					this._SecondBalance = value;
					this.SendPropertyChanged("SecondBalance");
					this.OnSecondBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdBalance", DbType="SmallInt")]
		public System.Nullable<short> ThirdBalance
		{
			get
			{
				return this._ThirdBalance;
			}
			set
			{
				if ((this._ThirdBalance != value))
				{
					this.OnThirdBalanceChanging(value);
					this.SendPropertyChanging();
					this._ThirdBalance = value;
					this.SendPropertyChanged("ThirdBalance");
					this.OnThirdBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(100)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliverDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeliverDate
		{
			get
			{
				return this._DeliverDate;
			}
			set
			{
				if ((this._DeliverDate != value))
				{
					this.OnDeliverDateChanging(value);
					this.SendPropertyChanging();
					this._DeliverDate = value;
					this.SendPropertyChanged("DeliverDate");
					this.OnDeliverDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_ReceptDetails_REP_Transportations", Storage="_REP_ReceptDetails", ThisKey="TransportID", OtherKey="ReceptDetailID", DeleteRule="NO ACTION")]
		public EntitySet<REP_ReceptDetail> REP_ReceptDetails
		{
			get
			{
				return this._REP_ReceptDetails;
			}
			set
			{
				this._REP_ReceptDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REP_ReceptDetails(REP_ReceptDetail entity)
		{
			this.SendPropertyChanging();
			entity.REP_Transportation = this;
		}
		
		private void detach_REP_ReceptDetails(REP_ReceptDetail entity)
		{
			this.SendPropertyChanging();
			entity.REP_Transportation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REP_Units")]
	public partial class REP_Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _UnitID;
		
		private string _UnitName;
		
		private EntitySet<REP_Stuff> _REP_Stuffs;
		
		private EntitySet<REP_Stuff> _Units;
		
		private EntitySet<REP_Stuff> _REP_Stuffs_REP_Units2s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitIDChanging(byte value);
    partial void OnUnitIDChanged();
    partial void OnUnitNameChanging(string value);
    partial void OnUnitNameChanged();
    #endregion
		
		public REP_Unit()
		{
			this._REP_Stuffs = new EntitySet<REP_Stuff>(new Action<REP_Stuff>(this.attach_REP_Stuffs), new Action<REP_Stuff>(this.detach_REP_Stuffs));
			this._Units = new EntitySet<REP_Stuff>(new Action<REP_Stuff>(this.attach_Units), new Action<REP_Stuff>(this.detach_Units));
			this._REP_Stuffs_REP_Units2s = new EntitySet<REP_Stuff>(new Action<REP_Stuff>(this.attach_REP_Stuffs_REP_Units2s), new Action<REP_Stuff>(this.detach_REP_Stuffs_REP_Units2s));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string UnitName
		{
			get
			{
				return this._UnitName;
			}
			set
			{
				if ((this._UnitName != value))
				{
					this.OnUnitNameChanging(value);
					this.SendPropertyChanging();
					this._UnitName = value;
					this.SendPropertyChanged("UnitName");
					this.OnUnitNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Stuffs_REP_Units", Storage="_REP_Stuffs", ThisKey="UnitID", OtherKey="PrimaryUnitID", DeleteRule="NO ACTION")]
		public EntitySet<REP_Stuff> REP_Stuffs
		{
			get
			{
				return this._REP_Stuffs;
			}
			set
			{
				this._REP_Stuffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Stuffs_REP_Units1", Storage="_Units", ThisKey="UnitID", OtherKey="SecondaryUnitID", DeleteRule="NO ACTION")]
		public EntitySet<REP_Stuff> Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				this._Units.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_REP_Stuffs_REP_Units2", Storage="_REP_Stuffs_REP_Units2s", ThisKey="UnitID", OtherKey="ThirdUnitID", DeleteRule="NO ACTION")]
		public EntitySet<REP_Stuff> REP_Stuffs_REP_Units2s
		{
			get
			{
				return this._REP_Stuffs_REP_Units2s;
			}
			set
			{
				this._REP_Stuffs_REP_Units2s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REP_Stuffs(REP_Stuff entity)
		{
			this.SendPropertyChanging();
			entity.REP_Unit = this;
		}
		
		private void detach_REP_Stuffs(REP_Stuff entity)
		{
			this.SendPropertyChanging();
			entity.REP_Unit = null;
		}
		
		private void attach_Units(REP_Stuff entity)
		{
			this.SendPropertyChanging();
			entity.SecondaryUnit = this;
		}
		
		private void detach_Units(REP_Stuff entity)
		{
			this.SendPropertyChanging();
			entity.SecondaryUnit = null;
		}
		
		private void attach_REP_Stuffs_REP_Units2s(REP_Stuff entity)
		{
			this.SendPropertyChanging();
			entity.ThirdUnit = this;
		}
		
		private void detach_REP_Stuffs_REP_Units2s(REP_Stuff entity)
		{
			this.SendPropertyChanging();
			entity.ThirdUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _RoleID;
		
		private string _RoleName;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(short value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UsersInRoles_Roles", Storage="_UsersInRoles", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolClothes")]
	public partial class SchoolClothe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolClotheID;
		
		private int _SchoolSubLevelID;
		
		private short _CycleClotheID;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<CycleClothe> _CycleClothe;
		
		private EntityRef<SchoolSubLevel> _SchoolSubLevel;
		
		private EntitySet<StudentClothe> _StudentClothes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolClotheIDChanging(int value);
    partial void OnSchoolClotheIDChanged();
    partial void OnSchoolSubLevelIDChanging(int value);
    partial void OnSchoolSubLevelIDChanged();
    partial void OnCycleClotheIDChanging(short value);
    partial void OnCycleClotheIDChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public SchoolClothe()
		{
			this._CycleClothe = default(EntityRef<CycleClothe>);
			this._SchoolSubLevel = default(EntityRef<SchoolSubLevel>);
			this._StudentClothes = new EntitySet<StudentClothe>(new Action<StudentClothe>(this.attach_StudentClothes), new Action<StudentClothe>(this.detach_StudentClothes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolClotheID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SchoolClotheID
		{
			get
			{
				return this._SchoolClotheID;
			}
			set
			{
				if ((this._SchoolClotheID != value))
				{
					this.OnSchoolClotheIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolClotheID = value;
					this.SendPropertyChanged("SchoolClotheID");
					this.OnSchoolClotheIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolSubLevelID", DbType="Int NOT NULL")]
		public int SchoolSubLevelID
		{
			get
			{
				return this._SchoolSubLevelID;
			}
			set
			{
				if ((this._SchoolSubLevelID != value))
				{
					if (this._SchoolSubLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolSubLevelIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolSubLevelID = value;
					this.SendPropertyChanged("SchoolSubLevelID");
					this.OnSchoolSubLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycleClotheID", DbType="SmallInt NOT NULL")]
		public short CycleClotheID
		{
			get
			{
				return this._CycleClotheID;
			}
			set
			{
				if ((this._CycleClotheID != value))
				{
					if (this._CycleClothe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCycleClotheIDChanging(value);
					this.SendPropertyChanging();
					this._CycleClotheID = value;
					this.SendPropertyChanged("CycleClotheID");
					this.OnCycleClotheIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolClothes_CycleClothes", Storage="_CycleClothe", ThisKey="CycleClotheID", OtherKey="CycleClotheID", IsForeignKey=true)]
		public CycleClothe CycleClothe
		{
			get
			{
				return this._CycleClothe.Entity;
			}
			set
			{
				CycleClothe previousValue = this._CycleClothe.Entity;
				if (((previousValue != value) 
							|| (this._CycleClothe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CycleClothe.Entity = null;
						previousValue.SchoolClothes.Remove(this);
					}
					this._CycleClothe.Entity = value;
					if ((value != null))
					{
						value.SchoolClothes.Add(this);
						this._CycleClotheID = value.CycleClotheID;
					}
					else
					{
						this._CycleClotheID = default(short);
					}
					this.SendPropertyChanged("CycleClothe");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolClothes_Schools_SubLevels", Storage="_SchoolSubLevel", ThisKey="SchoolSubLevelID", OtherKey="SchoolSubLevelID", IsForeignKey=true, DeleteOnNull=true)]
		public SchoolSubLevel SchoolSubLevel
		{
			get
			{
				return this._SchoolSubLevel.Entity;
			}
			set
			{
				SchoolSubLevel previousValue = this._SchoolSubLevel.Entity;
				if (((previousValue != value) 
							|| (this._SchoolSubLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolSubLevel.Entity = null;
						previousValue.SchoolClothes.Remove(this);
					}
					this._SchoolSubLevel.Entity = value;
					if ((value != null))
					{
						value.SchoolClothes.Add(this);
						this._SchoolSubLevelID = value.SchoolSubLevelID;
					}
					else
					{
						this._SchoolSubLevelID = default(int);
					}
					this.SendPropertyChanged("SchoolSubLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_StudentClothes_SchoolClothes", Storage="_StudentClothes", ThisKey="SchoolClotheID", OtherKey="SchoolClotheID", DeleteRule="CASCADE")]
		public EntitySet<StudentClothe> StudentClothes
		{
			get
			{
				return this._StudentClothes;
			}
			set
			{
				this._StudentClothes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentClothes(StudentClothe entity)
		{
			this.SendPropertyChanging();
			entity.SchoolClothe = this;
		}
		
		private void detach_StudentClothes(StudentClothe entity)
		{
			this.SendPropertyChanging();
			entity.SchoolClothe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolEmployeesArchive")]
	public partial class SchoolEmployeesArchive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolID;
		
		private System.DateTime _SubmitDate;
		
		private string _EmployeeType;
		
		private byte _FormerCount;
		
		private byte _NextCount;
		
		private string _Comment;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolIDChanging(int value);
    partial void OnSchoolIDChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnEmployeeTypeChanging(string value);
    partial void OnEmployeeTypeChanged();
    partial void OnFormerCountChanging(byte value);
    partial void OnFormerCountChanged();
    partial void OnNextCountChanging(byte value);
    partial void OnNextCountChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public SchoolEmployeesArchive()
		{
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SchoolID
		{
			get
			{
				return this._SchoolID;
			}
			set
			{
				if ((this._SchoolID != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolID = value;
					this.SendPropertyChanged("SchoolID");
					this.OnSchoolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeType", DbType="Char(1) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EmployeeType
		{
			get
			{
				return this._EmployeeType;
			}
			set
			{
				if ((this._EmployeeType != value))
				{
					this.OnEmployeeTypeChanging(value);
					this.SendPropertyChanging();
					this._EmployeeType = value;
					this.SendPropertyChanged("EmployeeType");
					this.OnEmployeeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormerCount", DbType="TinyInt NOT NULL")]
		public byte FormerCount
		{
			get
			{
				return this._FormerCount;
			}
			set
			{
				if ((this._FormerCount != value))
				{
					this.OnFormerCountChanging(value);
					this.SendPropertyChanging();
					this._FormerCount = value;
					this.SendPropertyChanged("FormerCount");
					this.OnFormerCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextCount", DbType="TinyInt NOT NULL")]
		public byte NextCount
		{
			get
			{
				return this._NextCount;
			}
			set
			{
				if ((this._NextCount != value))
				{
					this.OnNextCountChanging(value);
					this.SendPropertyChanging();
					this._NextCount = value;
					this.SendPropertyChanged("NextCount");
					this.OnNextCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EmployeesCountChange_Schools", Storage="_School", ThisKey="SchoolID", OtherKey="SchoolID", IsForeignKey=true, DeleteOnNull=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.SchoolEmployeesArchives.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.SchoolEmployeesArchives.Add(this);
						this._SchoolID = value.SchoolID;
					}
					else
					{
						this._SchoolID = default(int);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolFoods")]
	public partial class SchoolFood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolSubLevelID;
		
		private int _CalendarID;
		
		private short _CycleFoodID;
		
		private short _FoodCount;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<Calendar> _Calendar;
		
		private EntityRef<CycleFood> _CycleFood;
		
		private EntityRef<SchoolSubLevel> _SchoolSubLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolSubLevelIDChanging(int value);
    partial void OnSchoolSubLevelIDChanged();
    partial void OnCalendarIDChanging(int value);
    partial void OnCalendarIDChanged();
    partial void OnCycleFoodIDChanging(short value);
    partial void OnCycleFoodIDChanged();
    partial void OnFoodCountChanging(short value);
    partial void OnFoodCountChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public SchoolFood()
		{
			this._Calendar = default(EntityRef<Calendar>);
			this._CycleFood = default(EntityRef<CycleFood>);
			this._SchoolSubLevel = default(EntityRef<SchoolSubLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolSubLevelID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SchoolSubLevelID
		{
			get
			{
				return this._SchoolSubLevelID;
			}
			set
			{
				if ((this._SchoolSubLevelID != value))
				{
					if (this._SchoolSubLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolSubLevelIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolSubLevelID = value;
					this.SendPropertyChanged("SchoolSubLevelID");
					this.OnSchoolSubLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalendarID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CalendarID
		{
			get
			{
				return this._CalendarID;
			}
			set
			{
				if ((this._CalendarID != value))
				{
					if (this._Calendar.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCalendarIDChanging(value);
					this.SendPropertyChanging();
					this._CalendarID = value;
					this.SendPropertyChanged("CalendarID");
					this.OnCalendarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycleFoodID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short CycleFoodID
		{
			get
			{
				return this._CycleFoodID;
			}
			set
			{
				if ((this._CycleFoodID != value))
				{
					if (this._CycleFood.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCycleFoodIDChanging(value);
					this.SendPropertyChanging();
					this._CycleFoodID = value;
					this.SendPropertyChanged("CycleFoodID");
					this.OnCycleFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodCount", DbType="SmallInt NOT NULL")]
		public short FoodCount
		{
			get
			{
				return this._FoodCount;
			}
			set
			{
				if ((this._FoodCount != value))
				{
					this.OnFoodCountChanging(value);
					this.SendPropertyChanging();
					this._FoodCount = value;
					this.SendPropertyChanged("FoodCount");
					this.OnFoodCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolFoods_Calendar", Storage="_Calendar", ThisKey="CalendarID", OtherKey="CalendarID", IsForeignKey=true)]
		public Calendar Calendar
		{
			get
			{
				return this._Calendar.Entity;
			}
			set
			{
				Calendar previousValue = this._Calendar.Entity;
				if (((previousValue != value) 
							|| (this._Calendar.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Calendar.Entity = null;
						previousValue.SchoolFoods.Remove(this);
					}
					this._Calendar.Entity = value;
					if ((value != null))
					{
						value.SchoolFoods.Add(this);
						this._CalendarID = value.CalendarID;
					}
					else
					{
						this._CalendarID = default(int);
					}
					this.SendPropertyChanged("Calendar");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolFoods_CycleFoods", Storage="_CycleFood", ThisKey="CycleFoodID", OtherKey="CycleFoodID", IsForeignKey=true)]
		public CycleFood CycleFood
		{
			get
			{
				return this._CycleFood.Entity;
			}
			set
			{
				CycleFood previousValue = this._CycleFood.Entity;
				if (((previousValue != value) 
							|| (this._CycleFood.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CycleFood.Entity = null;
						previousValue.SchoolFoods.Remove(this);
					}
					this._CycleFood.Entity = value;
					if ((value != null))
					{
						value.SchoolFoods.Add(this);
						this._CycleFoodID = value.CycleFoodID;
					}
					else
					{
						this._CycleFoodID = default(short);
					}
					this.SendPropertyChanged("CycleFood");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolFoods_SchoolSubLevels", Storage="_SchoolSubLevel", ThisKey="SchoolSubLevelID", OtherKey="SchoolSubLevelID", IsForeignKey=true, DeleteOnNull=true)]
		public SchoolSubLevel SchoolSubLevel
		{
			get
			{
				return this._SchoolSubLevel.Entity;
			}
			set
			{
				SchoolSubLevel previousValue = this._SchoolSubLevel.Entity;
				if (((previousValue != value) 
							|| (this._SchoolSubLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolSubLevel.Entity = null;
						previousValue.SchoolFoods.Remove(this);
					}
					this._SchoolSubLevel.Entity = value;
					if ((value != null))
					{
						value.SchoolFoods.Add(this);
						this._SchoolSubLevelID = value.SchoolSubLevelID;
					}
					else
					{
						this._SchoolSubLevelID = default(int);
					}
					this.SendPropertyChanged("SchoolSubLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolKinds")]
	public partial class SchoolKind : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _SchoolKindID;
		
		private string _SchoolKindName;
		
		private EntitySet<School> _Schools;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolKindIDChanging(byte value);
    partial void OnSchoolKindIDChanged();
    partial void OnSchoolKindNameChanging(string value);
    partial void OnSchoolKindNameChanged();
    #endregion
		
		public SchoolKind()
		{
			this._Schools = new EntitySet<School>(new Action<School>(this.attach_Schools), new Action<School>(this.detach_Schools));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolKindID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte SchoolKindID
		{
			get
			{
				return this._SchoolKindID;
			}
			set
			{
				if ((this._SchoolKindID != value))
				{
					this.OnSchoolKindIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolKindID = value;
					this.SendPropertyChanged("SchoolKindID");
					this.OnSchoolKindIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolKindName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string SchoolKindName
		{
			get
			{
				return this._SchoolKindName;
			}
			set
			{
				if ((this._SchoolKindName != value))
				{
					this.OnSchoolKindNameChanging(value);
					this.SendPropertyChanging();
					this._SchoolKindName = value;
					this.SendPropertyChanged("SchoolKindName");
					this.OnSchoolKindNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Schools_SchoolKinds", Storage="_Schools", ThisKey="SchoolKindID", OtherKey="SchoolKindID", DeleteRule="NO ACTION")]
		public EntitySet<School> Schools
		{
			get
			{
				return this._Schools;
			}
			set
			{
				this._Schools.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.SchoolKind = this;
		}
		
		private void detach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.SchoolKind = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolLevels")]
	public partial class SchoolLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolLevelID;
		
		private short _LevelID;
		
		private int _SchoolID;
		
		private System.DateTime _SubmitDate;
		
		private System.Nullable<System.DateTime> _LockOutDate;
		
		private string _Comment;
		
		private EntityRef<Level> _Level;
		
		private EntityRef<School> _School;
		
		private EntitySet<SchoolSubLevel> _SchoolSubLevels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolLevelIDChanging(int value);
    partial void OnSchoolLevelIDChanged();
    partial void OnLevelIDChanging(short value);
    partial void OnLevelIDChanged();
    partial void OnSchoolIDChanging(int value);
    partial void OnSchoolIDChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnLockOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLockOutDateChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public SchoolLevel()
		{
			this._Level = default(EntityRef<Level>);
			this._School = default(EntityRef<School>);
			this._SchoolSubLevels = new EntitySet<SchoolSubLevel>(new Action<SchoolSubLevel>(this.attach_SchoolSubLevels), new Action<SchoolSubLevel>(this.detach_SchoolSubLevels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolLevelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SchoolLevelID
		{
			get
			{
				return this._SchoolLevelID;
			}
			set
			{
				if ((this._SchoolLevelID != value))
				{
					this.OnSchoolLevelIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolLevelID = value;
					this.SendPropertyChanged("SchoolLevelID");
					this.OnSchoolLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="SmallInt NOT NULL")]
		public short LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					if (this._Level.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolID", DbType="Int NOT NULL")]
		public int SchoolID
		{
			get
			{
				return this._SchoolID;
			}
			set
			{
				if ((this._SchoolID != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolID = value;
					this.SendPropertyChanged("SchoolID");
					this.OnSchoolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutDate", DbType="Date")]
		public System.Nullable<System.DateTime> LockOutDate
		{
			get
			{
				return this._LockOutDate;
			}
			set
			{
				if ((this._LockOutDate != value))
				{
					this.OnLockOutDateChanging(value);
					this.SendPropertyChanging();
					this._LockOutDate = value;
					this.SendPropertyChanged("LockOutDate");
					this.OnLockOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolLevels_Levels", Storage="_Level", ThisKey="LevelID", OtherKey="LevelID", IsForeignKey=true)]
		public Level Level
		{
			get
			{
				return this._Level.Entity;
			}
			set
			{
				Level previousValue = this._Level.Entity;
				if (((previousValue != value) 
							|| (this._Level.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Level.Entity = null;
						previousValue.SchoolLevels.Remove(this);
					}
					this._Level.Entity = value;
					if ((value != null))
					{
						value.SchoolLevels.Add(this);
						this._LevelID = value.LevelID;
					}
					else
					{
						this._LevelID = default(short);
					}
					this.SendPropertyChanged("Level");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolLevels_Schools", Storage="_School", ThisKey="SchoolID", OtherKey="SchoolID", IsForeignKey=true, DeleteOnNull=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.SchoolLevels.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.SchoolLevels.Add(this);
						this._SchoolID = value.SchoolID;
					}
					else
					{
						this._SchoolID = default(int);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolSubLevels_SchoolLevels", Storage="_SchoolSubLevels", ThisKey="SchoolLevelID", OtherKey="SchoolLevelID", DeleteRule="CASCADE")]
		public EntitySet<SchoolSubLevel> SchoolSubLevels
		{
			get
			{
				return this._SchoolSubLevels;
			}
			set
			{
				this._SchoolSubLevels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchoolSubLevels(SchoolSubLevel entity)
		{
			this.SendPropertyChanging();
			entity.SchoolLevel = this;
		}
		
		private void detach_SchoolSubLevels(SchoolSubLevel entity)
		{
			this.SendPropertyChanging();
			entity.SchoolLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolPaperities")]
	public partial class SchoolPaperity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolSubLevelID;
		
		private int _CalendarID;
		
		private short _CyclePaperityID;
		
		private short _PaperityCount;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<Calendar> _Calendar;
		
		private EntityRef<CyclePaperity> _CyclePaperity;
		
		private EntityRef<SchoolSubLevel> _SchoolSubLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolSubLevelIDChanging(int value);
    partial void OnSchoolSubLevelIDChanged();
    partial void OnCalendarIDChanging(int value);
    partial void OnCalendarIDChanged();
    partial void OnCyclePaperityIDChanging(short value);
    partial void OnCyclePaperityIDChanged();
    partial void OnPaperityCountChanging(short value);
    partial void OnPaperityCountChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public SchoolPaperity()
		{
			this._Calendar = default(EntityRef<Calendar>);
			this._CyclePaperity = default(EntityRef<CyclePaperity>);
			this._SchoolSubLevel = default(EntityRef<SchoolSubLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolSubLevelID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SchoolSubLevelID
		{
			get
			{
				return this._SchoolSubLevelID;
			}
			set
			{
				if ((this._SchoolSubLevelID != value))
				{
					if (this._SchoolSubLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolSubLevelIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolSubLevelID = value;
					this.SendPropertyChanged("SchoolSubLevelID");
					this.OnSchoolSubLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalendarID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CalendarID
		{
			get
			{
				return this._CalendarID;
			}
			set
			{
				if ((this._CalendarID != value))
				{
					if (this._Calendar.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCalendarIDChanging(value);
					this.SendPropertyChanging();
					this._CalendarID = value;
					this.SendPropertyChanged("CalendarID");
					this.OnCalendarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CyclePaperityID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short CyclePaperityID
		{
			get
			{
				return this._CyclePaperityID;
			}
			set
			{
				if ((this._CyclePaperityID != value))
				{
					if (this._CyclePaperity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCyclePaperityIDChanging(value);
					this.SendPropertyChanging();
					this._CyclePaperityID = value;
					this.SendPropertyChanged("CyclePaperityID");
					this.OnCyclePaperityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaperityCount", DbType="SmallInt NOT NULL")]
		public short PaperityCount
		{
			get
			{
				return this._PaperityCount;
			}
			set
			{
				if ((this._PaperityCount != value))
				{
					this.OnPaperityCountChanging(value);
					this.SendPropertyChanging();
					this._PaperityCount = value;
					this.SendPropertyChanged("PaperityCount");
					this.OnPaperityCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolPaperities_Calendar", Storage="_Calendar", ThisKey="CalendarID", OtherKey="CalendarID", IsForeignKey=true)]
		public Calendar Calendar
		{
			get
			{
				return this._Calendar.Entity;
			}
			set
			{
				Calendar previousValue = this._Calendar.Entity;
				if (((previousValue != value) 
							|| (this._Calendar.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Calendar.Entity = null;
						previousValue.SchoolPaperities.Remove(this);
					}
					this._Calendar.Entity = value;
					if ((value != null))
					{
						value.SchoolPaperities.Add(this);
						this._CalendarID = value.CalendarID;
					}
					else
					{
						this._CalendarID = default(int);
					}
					this.SendPropertyChanged("Calendar");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolPaperities_CyclePaperities", Storage="_CyclePaperity", ThisKey="CyclePaperityID", OtherKey="CyclePaperityID", IsForeignKey=true)]
		public CyclePaperity CyclePaperity
		{
			get
			{
				return this._CyclePaperity.Entity;
			}
			set
			{
				CyclePaperity previousValue = this._CyclePaperity.Entity;
				if (((previousValue != value) 
							|| (this._CyclePaperity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CyclePaperity.Entity = null;
						previousValue.SchoolPaperities.Remove(this);
					}
					this._CyclePaperity.Entity = value;
					if ((value != null))
					{
						value.SchoolPaperities.Add(this);
						this._CyclePaperityID = value.CyclePaperityID;
					}
					else
					{
						this._CyclePaperityID = default(short);
					}
					this.SendPropertyChanged("CyclePaperity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolPaperities_Schools_SubLevels", Storage="_SchoolSubLevel", ThisKey="SchoolSubLevelID", OtherKey="SchoolSubLevelID", IsForeignKey=true, DeleteOnNull=true)]
		public SchoolSubLevel SchoolSubLevel
		{
			get
			{
				return this._SchoolSubLevel.Entity;
			}
			set
			{
				SchoolSubLevel previousValue = this._SchoolSubLevel.Entity;
				if (((previousValue != value) 
							|| (this._SchoolSubLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolSubLevel.Entity = null;
						previousValue.SchoolPaperities.Remove(this);
					}
					this._SchoolSubLevel.Entity = value;
					if ((value != null))
					{
						value.SchoolPaperities.Add(this);
						this._SchoolSubLevelID = value.SchoolSubLevelID;
					}
					else
					{
						this._SchoolSubLevelID = default(int);
					}
					this.SendPropertyChanged("SchoolSubLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schools")]
	public partial class School : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolID;
		
		private int _SchoolCode;
		
		private string _SchoolName;
		
		private byte _SchoolKindID;
		
		private System.Nullable<short> _CityID;
		
		private string _Village;
		
		private string _Street;
		
		private string _Line;
		
		private string _Pelak;
		
		private string _PostalCode;
		
		private string _Phone;
		
		private byte _Gender;
		
		private string _ManagerID;
		
		private string _AssistanceID;
		
		private System.Nullable<int> _AreaCode;
		
		private System.Nullable<byte> _EmployeesCount_Fixed;
		
		private System.Nullable<byte> _EmployeesCount_Changable;
		
		private EntitySet<SchoolEmployeesArchive> _SchoolEmployeesArchives;
		
		private EntitySet<IntegratedSchool> _IntegratedSchools;
		
		private EntitySet<Integration> _Integrations;
		
		private EntitySet<SchoolLevel> _SchoolLevels;
		
		private EntityRef<Area> _Area;
		
		private EntityRef<City> _City;
		
		private EntityRef<SchoolKind> _SchoolKind;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolIDChanging(int value);
    partial void OnSchoolIDChanged();
    partial void OnSchoolCodeChanging(int value);
    partial void OnSchoolCodeChanged();
    partial void OnSchoolNameChanging(string value);
    partial void OnSchoolNameChanged();
    partial void OnSchoolKindIDChanging(byte value);
    partial void OnSchoolKindIDChanged();
    partial void OnCityIDChanging(System.Nullable<short> value);
    partial void OnCityIDChanged();
    partial void OnVillageChanging(string value);
    partial void OnVillageChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnLineChanging(string value);
    partial void OnLineChanged();
    partial void OnPelakChanging(string value);
    partial void OnPelakChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnGenderChanging(byte value);
    partial void OnGenderChanged();
    partial void OnManagerIDChanging(string value);
    partial void OnManagerIDChanged();
    partial void OnAssistanceIDChanging(string value);
    partial void OnAssistanceIDChanged();
    partial void OnAreaCodeChanging(System.Nullable<int> value);
    partial void OnAreaCodeChanged();
    partial void OnEmployeesCount_FixedChanging(System.Nullable<byte> value);
    partial void OnEmployeesCount_FixedChanged();
    partial void OnEmployeesCount_ChangableChanging(System.Nullable<byte> value);
    partial void OnEmployeesCount_ChangableChanged();
    #endregion
		
		public School()
		{
			this._SchoolEmployeesArchives = new EntitySet<SchoolEmployeesArchive>(new Action<SchoolEmployeesArchive>(this.attach_SchoolEmployeesArchives), new Action<SchoolEmployeesArchive>(this.detach_SchoolEmployeesArchives));
			this._IntegratedSchools = new EntitySet<IntegratedSchool>(new Action<IntegratedSchool>(this.attach_IntegratedSchools), new Action<IntegratedSchool>(this.detach_IntegratedSchools));
			this._Integrations = new EntitySet<Integration>(new Action<Integration>(this.attach_Integrations), new Action<Integration>(this.detach_Integrations));
			this._SchoolLevels = new EntitySet<SchoolLevel>(new Action<SchoolLevel>(this.attach_SchoolLevels), new Action<SchoolLevel>(this.detach_SchoolLevels));
			this._Area = default(EntityRef<Area>);
			this._City = default(EntityRef<City>);
			this._SchoolKind = default(EntityRef<SchoolKind>);
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SchoolID
		{
			get
			{
				return this._SchoolID;
			}
			set
			{
				if ((this._SchoolID != value))
				{
					this.OnSchoolIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolID = value;
					this.SendPropertyChanged("SchoolID");
					this.OnSchoolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolCode", DbType="Int NOT NULL")]
		public int SchoolCode
		{
			get
			{
				return this._SchoolCode;
			}
			set
			{
				if ((this._SchoolCode != value))
				{
					this.OnSchoolCodeChanging(value);
					this.SendPropertyChanging();
					this._SchoolCode = value;
					this.SendPropertyChanged("SchoolCode");
					this.OnSchoolCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SchoolName
		{
			get
			{
				return this._SchoolName;
			}
			set
			{
				if ((this._SchoolName != value))
				{
					this.OnSchoolNameChanging(value);
					this.SendPropertyChanging();
					this._SchoolName = value;
					this.SendPropertyChanged("SchoolName");
					this.OnSchoolNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolKindID", DbType="TinyInt NOT NULL")]
		public byte SchoolKindID
		{
			get
			{
				return this._SchoolKindID;
			}
			set
			{
				if ((this._SchoolKindID != value))
				{
					if (this._SchoolKind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolKindIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolKindID = value;
					this.SendPropertyChanged("SchoolKindID");
					this.OnSchoolKindIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="SmallInt")]
		public System.Nullable<short> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Village", DbType="NVarChar(50)")]
		public string Village
		{
			get
			{
				return this._Village;
			}
			set
			{
				if ((this._Village != value))
				{
					this.OnVillageChanging(value);
					this.SendPropertyChanging();
					this._Village = value;
					this.SendPropertyChanged("Village");
					this.OnVillageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(50)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line", DbType="NVarChar(50)")]
		public string Line
		{
			get
			{
				return this._Line;
			}
			set
			{
				if ((this._Line != value))
				{
					this.OnLineChanging(value);
					this.SendPropertyChanging();
					this._Line = value;
					this.SendPropertyChanged("Line");
					this.OnLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pelak", DbType="NVarChar(10)")]
		public string Pelak
		{
			get
			{
				return this._Pelak;
			}
			set
			{
				if ((this._Pelak != value))
				{
					this.OnPelakChanging(value);
					this.SendPropertyChanging();
					this._Pelak = value;
					this.SendPropertyChanged("Pelak");
					this.OnPelakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="VarChar(10)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(14)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="TinyInt NOT NULL")]
		public byte Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerID", DbType="NVarChar(256)")]
		public string ManagerID
		{
			get
			{
				return this._ManagerID;
			}
			set
			{
				if ((this._ManagerID != value))
				{
					this.OnManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerID = value;
					this.SendPropertyChanged("ManagerID");
					this.OnManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssistanceID", DbType="NVarChar(256)")]
		public string AssistanceID
		{
			get
			{
				return this._AssistanceID;
			}
			set
			{
				if ((this._AssistanceID != value))
				{
					this.OnAssistanceIDChanging(value);
					this.SendPropertyChanging();
					this._AssistanceID = value;
					this.SendPropertyChanged("AssistanceID");
					this.OnAssistanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaCode", DbType="Int")]
		public System.Nullable<int> AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeesCount_Fixed", DbType="TinyInt")]
		public System.Nullable<byte> EmployeesCount_Fixed
		{
			get
			{
				return this._EmployeesCount_Fixed;
			}
			set
			{
				if ((this._EmployeesCount_Fixed != value))
				{
					this.OnEmployeesCount_FixedChanging(value);
					this.SendPropertyChanging();
					this._EmployeesCount_Fixed = value;
					this.SendPropertyChanged("EmployeesCount_Fixed");
					this.OnEmployeesCount_FixedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeesCount_Changable", DbType="TinyInt")]
		public System.Nullable<byte> EmployeesCount_Changable
		{
			get
			{
				return this._EmployeesCount_Changable;
			}
			set
			{
				if ((this._EmployeesCount_Changable != value))
				{
					this.OnEmployeesCount_ChangableChanging(value);
					this.SendPropertyChanging();
					this._EmployeesCount_Changable = value;
					this.SendPropertyChanged("EmployeesCount_Changable");
					this.OnEmployeesCount_ChangableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EmployeesCountChange_Schools", Storage="_SchoolEmployeesArchives", ThisKey="SchoolID", OtherKey="SchoolID", DeleteRule="CASCADE")]
		public EntitySet<SchoolEmployeesArchive> SchoolEmployeesArchives
		{
			get
			{
				return this._SchoolEmployeesArchives;
			}
			set
			{
				this._SchoolEmployeesArchives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_IntegratedSchools_Schools", Storage="_IntegratedSchools", ThisKey="SchoolID", OtherKey="SchoolID", DeleteRule="NO ACTION")]
		public EntitySet<IntegratedSchool> IntegratedSchools
		{
			get
			{
				return this._IntegratedSchools;
			}
			set
			{
				this._IntegratedSchools.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Integrations_Schools", Storage="_Integrations", ThisKey="SchoolID", OtherKey="SchoolID", DeleteRule="NO ACTION")]
		public EntitySet<Integration> Integrations
		{
			get
			{
				return this._Integrations;
			}
			set
			{
				this._Integrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolLevels_Schools", Storage="_SchoolLevels", ThisKey="SchoolID", OtherKey="SchoolID", DeleteRule="CASCADE")]
		public EntitySet<SchoolLevel> SchoolLevels
		{
			get
			{
				return this._SchoolLevels;
			}
			set
			{
				this._SchoolLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Schools_Areas", Storage="_Area", ThisKey="AreaCode", OtherKey="AreaCode", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.Schools.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.Schools.Add(this);
						this._AreaCode = value.AreaCode;
					}
					else
					{
						this._AreaCode = default(Nullable<int>);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Schools_Cities", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Schools.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Schools.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(Nullable<short>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Schools_SchoolKinds", Storage="_SchoolKind", ThisKey="SchoolKindID", OtherKey="SchoolKindID", IsForeignKey=true)]
		public SchoolKind SchoolKind
		{
			get
			{
				return this._SchoolKind.Entity;
			}
			set
			{
				SchoolKind previousValue = this._SchoolKind.Entity;
				if (((previousValue != value) 
							|| (this._SchoolKind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolKind.Entity = null;
						previousValue.Schools.Remove(this);
					}
					this._SchoolKind.Entity = value;
					if ((value != null))
					{
						value.Schools.Add(this);
						this._SchoolKindID = value.SchoolKindID;
					}
					else
					{
						this._SchoolKindID = default(byte);
					}
					this.SendPropertyChanged("SchoolKind");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UsersInRoles_Schools", Storage="_UsersInRoles", ThisKey="SchoolID", OtherKey="SchoolID", DeleteRule="CASCADE")]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchoolEmployeesArchives(SchoolEmployeesArchive entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_SchoolEmployeesArchives(SchoolEmployeesArchive entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_IntegratedSchools(IntegratedSchool entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_IntegratedSchools(IntegratedSchool entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_Integrations(Integration entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_Integrations(Integration entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_SchoolLevels(SchoolLevel entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_SchoolLevels(SchoolLevel entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolSubLevels")]
	public partial class SchoolSubLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolSubLevelID;
		
		private int _SchoolLevelID;
		
		private short _SubLevelID;
		
		private System.Nullable<short> _BoysCount;
		
		private System.Nullable<short> _GirlsCount;
		
		private EntitySet<SchoolClothe> _SchoolClothes;
		
		private EntitySet<SchoolFood> _SchoolFoods;
		
		private EntitySet<SchoolPaperity> _SchoolPaperities;
		
		private EntityRef<SchoolLevel> _SchoolLevel;
		
		private EntitySet<SchoolSubLevelsArchive> _SchoolSubLevelsArchives;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolSubLevelIDChanging(int value);
    partial void OnSchoolSubLevelIDChanged();
    partial void OnSchoolLevelIDChanging(int value);
    partial void OnSchoolLevelIDChanged();
    partial void OnSubLevelIDChanging(short value);
    partial void OnSubLevelIDChanged();
    partial void OnBoysCountChanging(System.Nullable<short> value);
    partial void OnBoysCountChanged();
    partial void OnGirlsCountChanging(System.Nullable<short> value);
    partial void OnGirlsCountChanged();
    #endregion
		
		public SchoolSubLevel()
		{
			this._SchoolClothes = new EntitySet<SchoolClothe>(new Action<SchoolClothe>(this.attach_SchoolClothes), new Action<SchoolClothe>(this.detach_SchoolClothes));
			this._SchoolFoods = new EntitySet<SchoolFood>(new Action<SchoolFood>(this.attach_SchoolFoods), new Action<SchoolFood>(this.detach_SchoolFoods));
			this._SchoolPaperities = new EntitySet<SchoolPaperity>(new Action<SchoolPaperity>(this.attach_SchoolPaperities), new Action<SchoolPaperity>(this.detach_SchoolPaperities));
			this._SchoolLevel = default(EntityRef<SchoolLevel>);
			this._SchoolSubLevelsArchives = new EntitySet<SchoolSubLevelsArchive>(new Action<SchoolSubLevelsArchive>(this.attach_SchoolSubLevelsArchives), new Action<SchoolSubLevelsArchive>(this.detach_SchoolSubLevelsArchives));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolSubLevelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SchoolSubLevelID
		{
			get
			{
				return this._SchoolSubLevelID;
			}
			set
			{
				if ((this._SchoolSubLevelID != value))
				{
					this.OnSchoolSubLevelIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolSubLevelID = value;
					this.SendPropertyChanged("SchoolSubLevelID");
					this.OnSchoolSubLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolLevelID", DbType="Int NOT NULL")]
		public int SchoolLevelID
		{
			get
			{
				return this._SchoolLevelID;
			}
			set
			{
				if ((this._SchoolLevelID != value))
				{
					if (this._SchoolLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolLevelIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolLevelID = value;
					this.SendPropertyChanged("SchoolLevelID");
					this.OnSchoolLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubLevelID", DbType="SmallInt NOT NULL")]
		public short SubLevelID
		{
			get
			{
				return this._SubLevelID;
			}
			set
			{
				if ((this._SubLevelID != value))
				{
					this.OnSubLevelIDChanging(value);
					this.SendPropertyChanging();
					this._SubLevelID = value;
					this.SendPropertyChanged("SubLevelID");
					this.OnSubLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoysCount", DbType="SmallInt")]
		public System.Nullable<short> BoysCount
		{
			get
			{
				return this._BoysCount;
			}
			set
			{
				if ((this._BoysCount != value))
				{
					this.OnBoysCountChanging(value);
					this.SendPropertyChanging();
					this._BoysCount = value;
					this.SendPropertyChanged("BoysCount");
					this.OnBoysCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GirlsCount", DbType="SmallInt")]
		public System.Nullable<short> GirlsCount
		{
			get
			{
				return this._GirlsCount;
			}
			set
			{
				if ((this._GirlsCount != value))
				{
					this.OnGirlsCountChanging(value);
					this.SendPropertyChanging();
					this._GirlsCount = value;
					this.SendPropertyChanged("GirlsCount");
					this.OnGirlsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolClothes_Schools_SubLevels", Storage="_SchoolClothes", ThisKey="SchoolSubLevelID", OtherKey="SchoolSubLevelID", DeleteRule="CASCADE")]
		public EntitySet<SchoolClothe> SchoolClothes
		{
			get
			{
				return this._SchoolClothes;
			}
			set
			{
				this._SchoolClothes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolFoods_SchoolSubLevels", Storage="_SchoolFoods", ThisKey="SchoolSubLevelID", OtherKey="SchoolSubLevelID", DeleteRule="CASCADE")]
		public EntitySet<SchoolFood> SchoolFoods
		{
			get
			{
				return this._SchoolFoods;
			}
			set
			{
				this._SchoolFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolPaperities_Schools_SubLevels", Storage="_SchoolPaperities", ThisKey="SchoolSubLevelID", OtherKey="SchoolSubLevelID", DeleteRule="CASCADE")]
		public EntitySet<SchoolPaperity> SchoolPaperities
		{
			get
			{
				return this._SchoolPaperities;
			}
			set
			{
				this._SchoolPaperities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolSubLevels_SchoolLevels", Storage="_SchoolLevel", ThisKey="SchoolLevelID", OtherKey="SchoolLevelID", IsForeignKey=true, DeleteOnNull=true)]
		public SchoolLevel SchoolLevel
		{
			get
			{
				return this._SchoolLevel.Entity;
			}
			set
			{
				SchoolLevel previousValue = this._SchoolLevel.Entity;
				if (((previousValue != value) 
							|| (this._SchoolLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolLevel.Entity = null;
						previousValue.SchoolSubLevels.Remove(this);
					}
					this._SchoolLevel.Entity = value;
					if ((value != null))
					{
						value.SchoolSubLevels.Add(this);
						this._SchoolLevelID = value.SchoolLevelID;
					}
					else
					{
						this._SchoolLevelID = default(int);
					}
					this.SendPropertyChanged("SchoolLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolSubLevelsArchive_SchoolSubLevels", Storage="_SchoolSubLevelsArchives", ThisKey="SchoolSubLevelID", OtherKey="SchoolSubLevelID", DeleteRule="CASCADE")]
		public EntitySet<SchoolSubLevelsArchive> SchoolSubLevelsArchives
		{
			get
			{
				return this._SchoolSubLevelsArchives;
			}
			set
			{
				this._SchoolSubLevelsArchives.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchoolClothes(SchoolClothe entity)
		{
			this.SendPropertyChanging();
			entity.SchoolSubLevel = this;
		}
		
		private void detach_SchoolClothes(SchoolClothe entity)
		{
			this.SendPropertyChanging();
			entity.SchoolSubLevel = null;
		}
		
		private void attach_SchoolFoods(SchoolFood entity)
		{
			this.SendPropertyChanging();
			entity.SchoolSubLevel = this;
		}
		
		private void detach_SchoolFoods(SchoolFood entity)
		{
			this.SendPropertyChanging();
			entity.SchoolSubLevel = null;
		}
		
		private void attach_SchoolPaperities(SchoolPaperity entity)
		{
			this.SendPropertyChanging();
			entity.SchoolSubLevel = this;
		}
		
		private void detach_SchoolPaperities(SchoolPaperity entity)
		{
			this.SendPropertyChanging();
			entity.SchoolSubLevel = null;
		}
		
		private void attach_SchoolSubLevelsArchives(SchoolSubLevelsArchive entity)
		{
			this.SendPropertyChanging();
			entity.SchoolSubLevel = this;
		}
		
		private void detach_SchoolSubLevelsArchives(SchoolSubLevelsArchive entity)
		{
			this.SendPropertyChanging();
			entity.SchoolSubLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolSubLevelsArchive")]
	public partial class SchoolSubLevelsArchive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolSubLevelID;
		
		private System.DateTime _SubmitDate;
		
		private string _Gender;
		
		private short _FormerCount;
		
		private short _NextCount;
		
		private EntityRef<SchoolSubLevel> _SchoolSubLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolSubLevelIDChanging(int value);
    partial void OnSchoolSubLevelIDChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnFormerCountChanging(short value);
    partial void OnFormerCountChanged();
    partial void OnNextCountChanging(short value);
    partial void OnNextCountChanged();
    #endregion
		
		public SchoolSubLevelsArchive()
		{
			this._SchoolSubLevel = default(EntityRef<SchoolSubLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolSubLevelID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SchoolSubLevelID
		{
			get
			{
				return this._SchoolSubLevelID;
			}
			set
			{
				if ((this._SchoolSubLevelID != value))
				{
					if (this._SchoolSubLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolSubLevelIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolSubLevelID = value;
					this.SendPropertyChanged("SchoolSubLevelID");
					this.OnSchoolSubLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Char(1) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormerCount", DbType="SmallInt NOT NULL")]
		public short FormerCount
		{
			get
			{
				return this._FormerCount;
			}
			set
			{
				if ((this._FormerCount != value))
				{
					this.OnFormerCountChanging(value);
					this.SendPropertyChanging();
					this._FormerCount = value;
					this.SendPropertyChanged("FormerCount");
					this.OnFormerCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextCount", DbType="SmallInt NOT NULL")]
		public short NextCount
		{
			get
			{
				return this._NextCount;
			}
			set
			{
				if ((this._NextCount != value))
				{
					this.OnNextCountChanging(value);
					this.SendPropertyChanging();
					this._NextCount = value;
					this.SendPropertyChanged("NextCount");
					this.OnNextCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SchoolSubLevelsArchive_SchoolSubLevels", Storage="_SchoolSubLevel", ThisKey="SchoolSubLevelID", OtherKey="SchoolSubLevelID", IsForeignKey=true, DeleteOnNull=true)]
		public SchoolSubLevel SchoolSubLevel
		{
			get
			{
				return this._SchoolSubLevel.Entity;
			}
			set
			{
				SchoolSubLevel previousValue = this._SchoolSubLevel.Entity;
				if (((previousValue != value) 
							|| (this._SchoolSubLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolSubLevel.Entity = null;
						previousValue.SchoolSubLevelsArchives.Remove(this);
					}
					this._SchoolSubLevel.Entity = value;
					if ((value != null))
					{
						value.SchoolSubLevelsArchives.Add(this);
						this._SchoolSubLevelID = value.SchoolSubLevelID;
					}
					else
					{
						this._SchoolSubLevelID = default(int);
					}
					this.SendPropertyChanged("SchoolSubLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentClothes")]
	public partial class StudentClothe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _StudentClotheID;
		
		private int _SchoolClotheID;
		
		private string _StudentName;
		
		private byte _ClotheCount;
		
		private EntityRef<SchoolClothe> _SchoolClothe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentClotheIDChanging(long value);
    partial void OnStudentClotheIDChanged();
    partial void OnSchoolClotheIDChanging(int value);
    partial void OnSchoolClotheIDChanged();
    partial void OnStudentNameChanging(string value);
    partial void OnStudentNameChanged();
    partial void OnClotheCountChanging(byte value);
    partial void OnClotheCountChanged();
    #endregion
		
		public StudentClothe()
		{
			this._SchoolClothe = default(EntityRef<SchoolClothe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentClotheID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long StudentClotheID
		{
			get
			{
				return this._StudentClotheID;
			}
			set
			{
				if ((this._StudentClotheID != value))
				{
					this.OnStudentClotheIDChanging(value);
					this.SendPropertyChanging();
					this._StudentClotheID = value;
					this.SendPropertyChanged("StudentClotheID");
					this.OnStudentClotheIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolClotheID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SchoolClotheID
		{
			get
			{
				return this._SchoolClotheID;
			}
			set
			{
				if ((this._SchoolClotheID != value))
				{
					if (this._SchoolClothe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolClotheIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolClotheID = value;
					this.SendPropertyChanged("SchoolClotheID");
					this.OnSchoolClotheIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="NVarChar(35) NOT NULL", CanBeNull=false)]
		public string StudentName
		{
			get
			{
				return this._StudentName;
			}
			set
			{
				if ((this._StudentName != value))
				{
					this.OnStudentNameChanging(value);
					this.SendPropertyChanging();
					this._StudentName = value;
					this.SendPropertyChanged("StudentName");
					this.OnStudentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClotheCount", DbType="TinyInt NOT NULL")]
		public byte ClotheCount
		{
			get
			{
				return this._ClotheCount;
			}
			set
			{
				if ((this._ClotheCount != value))
				{
					this.OnClotheCountChanging(value);
					this.SendPropertyChanging();
					this._ClotheCount = value;
					this.SendPropertyChanged("ClotheCount");
					this.OnClotheCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_StudentClothes_SchoolClothes", Storage="_SchoolClothe", ThisKey="SchoolClotheID", OtherKey="SchoolClotheID", IsForeignKey=true, DeleteOnNull=true)]
		public SchoolClothe SchoolClothe
		{
			get
			{
				return this._SchoolClothe.Entity;
			}
			set
			{
				SchoolClothe previousValue = this._SchoolClothe.Entity;
				if (((previousValue != value) 
							|| (this._SchoolClothe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolClothe.Entity = null;
						previousValue.StudentClothes.Remove(this);
					}
					this._SchoolClothe.Entity = value;
					if ((value != null))
					{
						value.StudentClothes.Add(this);
						this._SchoolClotheID = value.SchoolClotheID;
					}
					else
					{
						this._SchoolClotheID = default(int);
					}
					this.SendPropertyChanged("SchoolClothe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubLevels")]
	public partial class SubLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _SubLevelID;
		
		private short _LevelID;
		
		private string _SubLevelName;
		
		private EntityRef<Level> _Level;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubLevelIDChanging(short value);
    partial void OnSubLevelIDChanged();
    partial void OnLevelIDChanging(short value);
    partial void OnLevelIDChanged();
    partial void OnSubLevelNameChanging(string value);
    partial void OnSubLevelNameChanged();
    #endregion
		
		public SubLevel()
		{
			this._Level = default(EntityRef<Level>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubLevelID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short SubLevelID
		{
			get
			{
				return this._SubLevelID;
			}
			set
			{
				if ((this._SubLevelID != value))
				{
					this.OnSubLevelIDChanging(value);
					this.SendPropertyChanging();
					this._SubLevelID = value;
					this.SendPropertyChanged("SubLevelID");
					this.OnSubLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					if (this._Level.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubLevelName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string SubLevelName
		{
			get
			{
				return this._SubLevelName;
			}
			set
			{
				if ((this._SubLevelName != value))
				{
					this.OnSubLevelNameChanging(value);
					this.SendPropertyChanging();
					this._SubLevelName = value;
					this.SendPropertyChanged("SubLevelName");
					this.OnSubLevelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SubLevels_Levels", Storage="_Level", ThisKey="LevelID", OtherKey="LevelID", IsForeignKey=true)]
		public Level Level
		{
			get
			{
				return this._Level.Entity;
			}
			set
			{
				Level previousValue = this._Level.Entity;
				if (((previousValue != value) 
							|| (this._Level.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Level.Entity = null;
						previousValue.SubLevels.Remove(this);
					}
					this._Level.Entity = value;
					if ((value != null))
					{
						value.SubLevels.Add(this);
						this._LevelID = value.LevelID;
					}
					else
					{
						this._LevelID = default(short);
					}
					this.SendPropertyChanged("Level");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private string _PassWord;
		
		private string _Email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<byte> _Gender;
		
		private string _Phone;
		
		private System.Nullable<System.DateTime> _LastLoginDate;
		
		private System.Nullable<System.DateTime> _LockOutDate;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderChanging(System.Nullable<byte> value);
    partial void OnGenderChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnLastLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginDateChanged();
    partial void OnLockOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLockOutDateChanged();
    #endregion
		
		public User()
		{
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(30)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="TinyInt")]
		public System.Nullable<byte> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(13)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutDate", DbType="Date")]
		public System.Nullable<System.DateTime> LockOutDate
		{
			get
			{
				return this._LockOutDate;
			}
			set
			{
				if ((this._LockOutDate != value))
				{
					this.OnLockOutDateChanging(value);
					this.SendPropertyChanging();
					this._LockOutDate = value;
					this.SendPropertyChanged("LockOutDate");
					this.OnLockOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UsersInRoles_Users", Storage="_UsersInRoles", ThisKey="UserID", OtherKey="UserID", DeleteRule="CASCADE")]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersInRoles")]
	public partial class UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserInRoleID;
		
		private int _UserID;
		
		private short _RoleID;
		
		private System.Nullable<int> _SchoolID;
		
		private System.Nullable<int> _AreaCode;
		
		private System.DateTime _SubmitDate;
		
		private System.Nullable<System.DateTime> _LockOutDate;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<MessageUser> _MessageUsers;
		
		private EntityRef<Area> _Area;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<School> _School;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserInRoleIDChanging(int value);
    partial void OnUserInRoleIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(short value);
    partial void OnRoleIDChanged();
    partial void OnSchoolIDChanging(System.Nullable<int> value);
    partial void OnSchoolIDChanged();
    partial void OnAreaCodeChanging(System.Nullable<int> value);
    partial void OnAreaCodeChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnLockOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLockOutDateChanged();
    #endregion
		
		public UsersInRole()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._MessageUsers = new EntitySet<MessageUser>(new Action<MessageUser>(this.attach_MessageUsers), new Action<MessageUser>(this.detach_MessageUsers));
			this._Area = default(EntityRef<Area>);
			this._Role = default(EntityRef<Role>);
			this._School = default(EntityRef<School>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInRoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserInRoleID
		{
			get
			{
				return this._UserInRoleID;
			}
			set
			{
				if ((this._UserInRoleID != value))
				{
					this.OnUserInRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserInRoleID = value;
					this.SendPropertyChanged("UserInRoleID");
					this.OnUserInRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="SmallInt NOT NULL")]
		public short RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolID", DbType="Int")]
		public System.Nullable<int> SchoolID
		{
			get
			{
				return this._SchoolID;
			}
			set
			{
				if ((this._SchoolID != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolID = value;
					this.SendPropertyChanged("SchoolID");
					this.OnSchoolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaCode", DbType="Int")]
		public System.Nullable<int> AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockOutDate
		{
			get
			{
				return this._LockOutDate;
			}
			set
			{
				if ((this._LockOutDate != value))
				{
					this.OnLockOutDateChanging(value);
					this.SendPropertyChanging();
					this._LockOutDate = value;
					this.SendPropertyChanged("LockOutDate");
					this.OnLockOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Messages_UsersInRoles", Storage="_Messages", ThisKey="UserInRoleID", OtherKey="UserInRoleID", DeleteRule="NO ACTION")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_MessageUsers_UsersInRoles", Storage="_MessageUsers", ThisKey="UserInRoleID", OtherKey="UserInRoleID", DeleteRule="NO ACTION")]
		public EntitySet<MessageUser> MessageUsers
		{
			get
			{
				return this._MessageUsers;
			}
			set
			{
				this._MessageUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UsersInRoles_Areas", Storage="_Area", ThisKey="AreaCode", OtherKey="AreaCode", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._AreaCode = value.AreaCode;
					}
					else
					{
						this._AreaCode = default(Nullable<int>);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UsersInRoles_Roles", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(short);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UsersInRoles_Schools", Storage="_School", ThisKey="SchoolID", OtherKey="SchoolID", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._SchoolID = value.SchoolID;
					}
					else
					{
						this._SchoolID = default(Nullable<int>);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UsersInRoles_Users", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteOnNull=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.UsersInRole = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.UsersInRole = null;
		}
		
		private void attach_MessageUsers(MessageUser entity)
		{
			this.SendPropertyChanging();
			entity.UsersInRole = this;
		}
		
		private void detach_MessageUsers(MessageUser entity)
		{
			this.SendPropertyChanging();
			entity.UsersInRole = null;
		}
	}
}
#pragma warning restore 1591
